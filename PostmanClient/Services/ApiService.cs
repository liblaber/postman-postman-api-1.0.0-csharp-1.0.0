// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using PostmanClient.Http;
using PostmanClient.Http.Serialization;
using PostmanClient.Models;
using PostmanClient.OneOf;

namespace PostmanClient.Services;

public class ApiService : BaseService
{
    internal ApiService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Gets information about all APIs in a workspace.</summary>
    /// <param name="workspaceId">The workspace's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    /// <param name="createdBy">Return only results created by the given user ID.</param>
    /// <param name="cursor">The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.</param>
    /// <param name="description">Return only APIs whose description includes the given value. Matching is not case-sensitive.</param>
    /// <param name="limit">The maximum number of rows to return in the response.</param>
    public async Task<GetApis> GetApisAsync(
        string workspaceId,
        Accept accept,
        long? createdBy = null,
        string? cursor = null,
        string? description = null,
        long? limit = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(workspaceId, nameof(workspaceId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Get, "apis")
            .SetQueryParameter("workspaceId", workspaceId)
            .SetHeader("Accept", accept.Value)
            .SetOptionalQueryParameter("createdBy", createdBy)
            .SetOptionalQueryParameter("cursor", cursor)
            .SetOptionalQueryParameter("description", description)
            .SetOptionalQueryParameter("limit", limit)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetApis>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Creates an API.</summary>
    /// <param name="workspaceId">The workspace's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<CreateApiOkResponse> CreateApiAsync(
        CreateApiRequest input,
        string workspaceId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(workspaceId, nameof(workspaceId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Post, "apis")
            .SetQueryParameter("workspaceId", workspaceId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CreateApiOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Gets information about an API.
    ///
    /// **Note:**
    ///
    /// - Git-connected APIs will only return the `versions` and `gitInfo` query responses. This is because schema and collection information is stored in the connected Git repository. The `gitInfo` object only lists the repository and folder locations of the files.
    /// - API viewers can only use the `versions` option in the `include` query parameter.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    /// <param name="include">
    /// An array that contains additional resources to include in the response. Use this parameter to query for element links to the API, such as  collections and schemas:
    /// - `collections` — Query for linked Postman collections.
    /// - `versions` — Query for linked versions.
    /// - `schemas` — Query for linked schemas.
    /// - `gitInfo` — Query for information about the API's git-linked repository. This query only returns the linked repository and folder locations of the files. It does not return `collections` or `schemas` information.
    ///
    /// **Note:**
    ///
    /// API viewers can only use the `versions` option.
    /// </param>
    public async Task<OneOf<GetApi1, GetApi2>> GetApiAsync(
        string apiId,
        Accept accept,
        List<GetApiInclude>? include = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Get, "apis/{apiId}")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetOptionalQueryParameter("include", include)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<OneOf<GetApi1, GetApi2>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Updates an API.</summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<UpdateApiOkResponse> UpdateApiAsync(
        UpdateApiRequest input,
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Put, "apis/{apiId}")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<UpdateApiOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Deletes an API.</summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task DeleteApiAsync(
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Delete, "apis/{apiId}")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();
    }

    /// <summary>
    /// Adds a collection to an API. To do this, use the following `operationType` values:
    ///
    /// - `COPY_COLLECTION` — Copies a collection from the workspace and adds it to an API.
    /// - `CREATE_NEW` — Creates a new collection by providing the new collection's content.
    /// - `GENERATE_FROM_SCHEMA` — Generates the collection from an API schema.
    ///     - `options` — An object that contains advanced creation options and their values. You can find a complete list of properties and their values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<AddApiCollectionOkResponse> AddApiCollectionAsync(
        AddApiCollection1 input,
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Post, "apis/{apiId}/collections")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<AddApiCollectionOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Adds a collection to an API. To do this, use the following `operationType` values:
    ///
    /// - `COPY_COLLECTION` — Copies a collection from the workspace and adds it to an API.
    /// - `CREATE_NEW` — Creates a new collection by providing the new collection's content.
    /// - `GENERATE_FROM_SCHEMA` — Generates the collection from an API schema.
    ///     - `options` — An object that contains advanced creation options and their values. You can find a complete list of properties and their values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<AddApiCollectionOkResponse> AddApiCollectionAsync(
        AddApiCollection2 input,
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Post, "apis/{apiId}/collections")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<AddApiCollectionOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Adds a collection to an API. To do this, use the following `operationType` values:
    ///
    /// - `COPY_COLLECTION` — Copies a collection from the workspace and adds it to an API.
    /// - `CREATE_NEW` — Creates a new collection by providing the new collection's content.
    /// - `GENERATE_FROM_SCHEMA` — Generates the collection from an API schema.
    ///     - `options` — An object that contains advanced creation options and their values. You can find a complete list of properties and their values in Postman's [OpenAPI 3.0 to Postman Collection v2.1.0 Converter OPTIONS documentation](https://github.com/postmanlabs/openapi-to-postman/blob/develop/OPTIONS.md). These properties are case-sensitive.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<AddApiCollectionOkResponse> AddApiCollectionAsync(
        AddApiCollection3 input,
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Post, "apis/{apiId}/collections")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<AddApiCollectionOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Gets a collection attached to an API. You can use the `versionId` query parameter to get a collection published in a version.
    ///
    /// **Note:**
    ///
    /// The `versionId` query parameter is a required parameter for API viewers.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="collectionId">The collection's unique ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    /// <param name="versionId">The API's version ID.</param>
    public async Task<object> GetApiCollectionAsync(
        string apiId,
        string collectionId,
        Accept accept,
        string? versionId = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Get, "apis/{apiId}/collections/{collectionId}")
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("collectionId", collectionId)
            .SetHeader("Accept", accept.Value)
            .SetOptionalQueryParameter("versionId", versionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<object>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Syncs a collection attached to an API with the API schema.
    ///
    /// This is an asynchronous endpoint that returns an HTTP `202 Accepted` response. The response contains a polling link to the `/apis/{apiId}/tasks/{taskId}` endpoint in the `Location` header.
    ///
    /// **Note:**
    ///
    /// This endpoint only supports the OpenAPI 3 schema type.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="collectionId">The collection's unique ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<SyncCollectionWithSchema> SyncCollectionWithSchemaAsync(
        string apiId,
        string collectionId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "apis/{apiId}/collections/{collectionId}/sync-with-schema-tasks"
        )
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("collectionId", collectionId)
            .SetHeader("Accept", accept.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<SyncCollectionWithSchema>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets all comments left by users in an API.</summary>
    /// <param name="apiId">The API's ID.</param>
    public async Task<CommentResponse> GetApiCommentsAsync(
        string apiId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));

        var request = new RequestBuilder(HttpMethod.Get, "apis/{apiId}/comments")
            .SetPathParameter("apiId", apiId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CommentResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Creates a comment on an API.
    ///
    /// **Note:**
    ///
    /// This endpoint accepts a max of 10,000 characters.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    public async Task<CommentCreatedUpdated> CreateApiCommentAsync(
        CommentCreateUpdate input,
        string apiId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));

        var request = new RequestBuilder(HttpMethod.Post, "apis/{apiId}/comments")
            .SetPathParameter("apiId", apiId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CommentCreatedUpdated>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates a comment on an API.
    ///
    /// **Note:**
    ///
    /// This endpoint accepts a max of 10,000 characters.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="commentId">The comment's ID.</param>
    public async Task<CommentCreatedUpdated> UpdateApiCommentAsync(
        CommentCreateUpdate input,
        string apiId,
        long commentId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));

        var request = new RequestBuilder(HttpMethod.Put, "apis/{apiId}/comments/{commentId}")
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("commentId", commentId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CommentCreatedUpdated>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Deletes a comment from an API. On success, this returns an HTTP `204 No Content` response.
    ///
    /// **Note:**
    ///
    /// Deleting the first comment of a thread deletes all the comments in the thread.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="commentId">The comment's ID.</param>
    public async Task DeleteApiCommentAsync(
        string apiId,
        long commentId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));

        var request = new RequestBuilder(HttpMethod.Delete, "apis/{apiId}/comments/{commentId}")
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("commentId", commentId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();
    }

    /// <summary>Creates a schema for an API.</summary>
    /// <param name="input">The request body to create an API schema.</param>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<CreateApiSchemaOkResponse> CreateApiSchemaAsync(
        CreateApiSchemaRequest input,
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Post, "apis/{apiId}/schemas")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CreateApiSchemaOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Gets information about API schema. You can use the `versionId` query parameter to get a schema published in an API version.
    ///
    /// You can use this API to do the following:
    ///
    /// - Get a schema's metadata.
    /// - Get all the files in a schema. This only returns the first file in the schema. The endpoint response contains a link to the next set of response results.
    /// - Get a schema's contents in multi-file or bundled format.
    ///
    /// **Note:**
    ///
    /// The `versionId` query parameter is a required parameter for API viewers.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="schemaId">The API schema's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    /// <param name="versionId">The API's version ID.</param>
    /// <param name="bundled">If true, return the schema in a bundled format.</param>
    public async Task<OneOf<GetApiSchema1, GetApiSchema2>> GetApiSchemaAsync(
        string apiId,
        string schemaId,
        Accept accept,
        string? versionId = null,
        bool? bundled = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(schemaId, nameof(schemaId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Get, "apis/{apiId}/schemas/{schemaId}")
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("schemaId", schemaId)
            .SetHeader("Accept", accept.Value)
            .SetOptionalQueryParameter("versionId", versionId)
            .SetOptionalQueryParameter("bundled", bundled)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<OneOf<GetApiSchema1, GetApiSchema2>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Gets the files in an API schema. You can use the `versionId` query parameter to get schema files published in an API version.
    ///
    /// **Note:**
    ///
    /// The `versionId` query parameter is a required parameter for API viewers.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="schemaId">The API schema's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    /// <param name="versionId">The API's version ID.</param>
    /// <param name="limit">The maximum number of rows to return in the response.</param>
    /// <param name="cursor">The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.</param>
    public async Task<GetApiSchemaFiles> GetApiSchemaFilesAsync(
        string apiId,
        string schemaId,
        Accept accept,
        string? versionId = null,
        long? limit = null,
        string? cursor = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(schemaId, nameof(schemaId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Get, "apis/{apiId}/schemas/{schemaId}/files")
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("schemaId", schemaId)
            .SetHeader("Accept", accept.Value)
            .SetOptionalQueryParameter("versionId", versionId)
            .SetOptionalQueryParameter("limit", limit)
            .SetOptionalQueryParameter("cursor", cursor)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetApiSchemaFiles>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Gets an API schema file contents at the defined path. You can use the `versionId` query parameter to get schema file contents published in an API version.
    ///
    /// **Note:**
    ///
    /// The `versionId` query parameter is a required parameter for API viewers.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="schemaId">The API schema's ID.</param>
    /// <param name="filePath">The path to the schema file.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    /// <param name="versionId">The API's version ID.</param>
    public async Task<GetApiSchemaFileContents> GetApiSchemaFileContentsAsync(
        string apiId,
        string schemaId,
        string filePath,
        Accept accept,
        string? versionId = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(schemaId, nameof(schemaId));
        ArgumentNullException.ThrowIfNull(filePath, nameof(filePath));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "apis/{apiId}/schemas/{schemaId}/files/{file-path}"
        )
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("schemaId", schemaId)
            .SetPathParameter("file-path", filePath)
            .SetHeader("Accept", accept.Value)
            .SetOptionalQueryParameter("versionId", versionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetApiSchemaFileContents>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Creates or updates an API schema file.
    ///
    /// **Note:**
    ///
    /// - If the provided file path exists, the file will be updated with the new contents.
    /// - If the provided file path does not exist, then a new schema file will be created.
    /// - If the file path contains a `/` (forward slash) character, then a folder is created. For example, if the file path is the `dir/schema.json` value, then a `dir` folder is created with the `schema.json` file inside.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="schemaId">The API schema's ID.</param>
    /// <param name="filePath">The path to the schema file.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<CreateUpdateApiSchemaFileOkResponse> CreateUpdateApiSchemaFileAsync(
        CreateUpdateApiSchemaFileRequest input,
        string apiId,
        string schemaId,
        string filePath,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(schemaId, nameof(schemaId));
        ArgumentNullException.ThrowIfNull(filePath, nameof(filePath));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "apis/{apiId}/schemas/{schemaId}/files/{file-path}"
        )
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("schemaId", schemaId)
            .SetPathParameter("file-path", filePath)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CreateUpdateApiSchemaFileOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Deletes a file in an API schema.</summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="schemaId">The API schema's ID.</param>
    /// <param name="filePath">The path to the schema file.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task DeleteApiSchemaFileAsync(
        string apiId,
        string schemaId,
        string filePath,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(schemaId, nameof(schemaId));
        ArgumentNullException.ThrowIfNull(filePath, nameof(filePath));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(
            HttpMethod.Delete,
            "apis/{apiId}/schemas/{schemaId}/files/{file-path}"
        )
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("schemaId", schemaId)
            .SetPathParameter("file-path", filePath)
            .SetHeader("Accept", accept.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();
    }

    /// <summary>Gets the status of an asynchronous task.</summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="taskId">The task's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<GetStatusOfAnAsyncTask> GetStatusOfAnAsyncTaskAsync(
        string apiId,
        string taskId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(taskId, nameof(taskId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Get, "apis/{apiId}/tasks/{taskId}")
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("taskId", taskId)
            .SetHeader("Accept", accept.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetStatusOfAnAsyncTask>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets all the published versions of an API.</summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    /// <param name="cursor">The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.</param>
    /// <param name="limit">The maximum number of rows to return in the response.</param>
    public async Task<GetApiVersions> GetApiVersionsAsync(
        string apiId,
        Accept accept,
        string? cursor = null,
        long? limit = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Get, "apis/{apiId}/versions")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetOptionalQueryParameter("cursor", cursor)
            .SetOptionalQueryParameter("limit", limit)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetApiVersions>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Creates a new API version asynchronously and immediately returns an HTTP `202 Accepted` response. The response contains a polling link to the task status API in the `Location` header.
    ///
    /// This endpoint is equivalent to publishing a version in Postman app, which is the snapshot of API collections and schema at a given point in time.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<CreateApiVersionAcceptedResponse> CreateApiVersionAsync(
        CreateApiVersion1 input,
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Post, "apis/{apiId}/versions")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CreateApiVersionAcceptedResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Creates a new API version asynchronously and immediately returns an HTTP `202 Accepted` response. The response contains a polling link to the task status API in the `Location` header.
    ///
    /// This endpoint is equivalent to publishing a version in Postman app, which is the snapshot of API collections and schema at a given point in time.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<CreateApiVersionAcceptedResponse> CreateApiVersionAsync(
        CreateApiVersion2 input,
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Post, "apis/{apiId}/versions")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CreateApiVersionAcceptedResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Creates a new API version asynchronously and immediately returns an HTTP `202 Accepted` response. The response contains a polling link to the task status API in the `Location` header.
    ///
    /// This endpoint is equivalent to publishing a version in Postman app, which is the snapshot of API collections and schema at a given point in time.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<CreateApiVersionAcceptedResponse> CreateApiVersionAsync(
        CreateApiVersion3 input,
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Post, "apis/{apiId}/versions")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CreateApiVersionAcceptedResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Gets information about an API version.
    ///
    /// **Note:**
    ///
    /// - For API editors, this endpoint returns an HTTP `302 Found` status code when the version status is pending. It also returns the `/apis/{apiId}/tasks/{taskId}` task status response header.
    /// - For API viewers, this endpoint returns an HTTP `404 Not Found` when the version status is pending.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="versionId">The API's version ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<GetApiVersion> GetApiVersionAsync(
        string apiId,
        string versionId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(versionId, nameof(versionId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Get, "apis/{apiId}/versions/{versionId}")
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("versionId", versionId)
            .SetHeader("Accept", accept.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetApiVersion>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates an API version.
    ///
    /// **Note:**
    ///
    /// This endpoint returns an HTTP `404 Not Found` response when an API version is pending publication.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="versionId">The API's version ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<UpdateApiVersionOkResponse> UpdateApiVersionAsync(
        UpdateApiVersionRequest input,
        string apiId,
        string versionId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(versionId, nameof(versionId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Put, "apis/{apiId}/versions/{versionId}")
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("versionId", versionId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<UpdateApiVersionOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Deletes an API version.
    ///
    /// **Note:**
    ///
    /// This endpoint returns an HTTP `404 Not Found` response when an API version is pending publication.
    /// </summary>
    /// <param name="apiId">The API's ID.</param>
    /// <param name="versionId">The API's version ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task DeleteApiVersionAsync(
        string apiId,
        string versionId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(versionId, nameof(versionId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Delete, "apis/{apiId}/versions/{versionId}")
            .SetPathParameter("apiId", apiId)
            .SetPathParameter("versionId", versionId)
            .SetHeader("Accept", accept.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();
    }
}
