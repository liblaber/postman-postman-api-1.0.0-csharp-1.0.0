// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using PostmanClient.Http;
using PostmanClient.Http.Exceptions;
using PostmanClient.Http.Extensions;
using PostmanClient.Http.Serialization;
using PostmanClient.Models;

namespace PostmanClient.Services;

public class MonitorsService : BaseService
{
    internal MonitorsService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Gets all monitors.</summary>
    /// <param name="workspace">Return only results found in the given workspace.</param>
    public async Task<GetMonitors> GetMonitorsAsync(
        string? workspace = null,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "monitors")
            .SetOptionalQueryParameter("workspace", workspace)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetMonitors>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Creates a monitor.
    ///
    /// **Note:**
    ///
    /// You cannot create monitors for collections added to an API definition.
    /// </summary>
    /// <param name="workspace">The workspace's ID.</param>
    public async Task<CreateMonitorOkResponse> CreateMonitorAsync(
        CreateMonitorRequest input,
        string? workspace = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "monitors")
            .SetOptionalQueryParameter("workspace", workspace)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<CreateMonitorOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets information about a monitor.</summary>
    /// <param name="monitorId">The monitor's ID.</param>
    public async Task<GetMonitor> GetMonitorAsync(
        string monitorId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(monitorId, nameof(monitorId));

        var request = new RequestBuilder(HttpMethod.Get, "monitors/{monitorId}")
            .SetPathParameter("monitorId", monitorId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetMonitor>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Updates a monitor.</summary>
    /// <param name="monitorId">The monitor's ID.</param>
    public async Task<UpdateMonitorOkResponse> UpdateMonitorAsync(
        UpdateMonitorRequest input,
        string monitorId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(monitorId, nameof(monitorId));

        var request = new RequestBuilder(HttpMethod.Put, "monitors/{monitorId}")
            .SetPathParameter("monitorId", monitorId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<UpdateMonitorOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Deletes a monitor.</summary>
    /// <param name="monitorId">The monitor's ID.</param>
    public async Task<DeleteMonitor> DeleteMonitorAsync(
        string monitorId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(monitorId, nameof(monitorId));

        var request = new RequestBuilder(HttpMethod.Delete, "monitors/{monitorId}")
            .SetPathParameter("monitorId", monitorId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<DeleteMonitor>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Runs a monitor and returns its run results.</summary>
    /// <param name="monitorId">The monitor's ID.</param>
    public async Task<RunMonitor> RunMonitorAsync(
        string monitorId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(monitorId, nameof(monitorId));

        var request = new RequestBuilder(HttpMethod.Post, "monitors/{monitorId}/run")
            .SetPathParameter("monitorId", monitorId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<RunMonitor>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
