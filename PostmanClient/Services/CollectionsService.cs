// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using PostmanClient.Http;
using PostmanClient.Http.Serialization;
using PostmanClient.Models;

namespace PostmanClient.Services;

public class CollectionsService : BaseService
{
    internal CollectionsService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Gets all of your [collections](https://www.getpostman.com/docs/collections). The response includes all of your subscribed collections.</summary>
    /// <param name="workspace">The workspace's ID.</param>
    /// <param name="name">Filter results by collections that match the given name.</param>
    public async Task<GetCollections> GetCollectionsAsync(
        string? workspace = null,
        string? name = null,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "collections")
            .SetOptionalQueryParameter("workspace", workspace)
            .SetOptionalQueryParameter("name", name)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetCollections>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Creates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html).
    ///
    /// For more information about the Collection Format, see the [Postman Collection Format documentation](https://learning.postman.com/collection-format/getting-started/overview/).
    ///
    /// **Note:**
    ///
    /// - For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
    ///     - `info` object — Use the `definitions.info` entry.
    ///     - `item` object — Use the `definitions.items` entry.
    /// - For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).
    /// </summary>
    /// <param name="workspace">The workspace's ID.</param>
    public async Task<CreateCollectionOkResponse> CreateCollectionAsync(
        CollectionsCreateCollectionRequest input,
        string? workspace = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "collections")
            .SetOptionalQueryParameter("workspace", workspace)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CreateCollectionOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Creates a [fork](https://learning.postman.com/docs/collaborating-in-postman/version-control/#creating-a-fork) from an existing collection into a workspace.</summary>
    /// <param name="collectionId">The collection's ID.</param>
    /// <param name="workspace">The workspace ID in which to create the fork.</param>
    public async Task<CreateCollectionForkOkResponse> CreateCollectionForkAsync(
        CreateCollectionForkRequest input,
        string collectionId,
        string workspace,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));
        ArgumentNullException.ThrowIfNull(workspace, nameof(workspace));

        var request = new RequestBuilder(HttpMethod.Post, "collections/fork/{collectionId}")
            .SetPathParameter("collectionId", collectionId)
            .SetQueryParameter("workspace", workspace)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CreateCollectionForkOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Merges a forked collection back into its parent collection.</summary>
    public async Task<MergeCollectionForkOkResponse> MergeCollectionForkAsync(
        MergeCollectionForkRequest input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "collections/merge")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<MergeCollectionForkOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).</summary>
    /// <param name="collectionId">The collection's ID.</param>
    /// <param name="accessKey">A collection's read-only access key. Using this query parameter does not require an API key to call the endpoint.</param>
    /// <param name="model">Return a list of only the collection's root-level request (`rootLevelRequests`) and folder (`rootLevelFolders`) IDs instead of the full collection element data.</param>
    public async Task<GetCollection> GetCollectionAsync(
        string collectionId,
        string? accessKey = null,
        GetCollectionModel? model = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Get, "collections/{collectionId}")
            .SetPathParameter("collectionId", collectionId)
            .SetOptionalQueryParameter("access_key", accessKey)
            .SetOptionalQueryParameter("model", model?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetCollection>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Replaces the contents of a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html). Include the collection's ID values in the request body. If you do not, the endpoint removes the existing items and creates new items.
    ///
    /// > The maximum collection size this endpoint accepts cannot exceed 20 MB.
    ///
    /// For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
    /// - `info` object — Use `../definitions/info"`.
    /// - `item` object — Use `../definitions/item"`.
    ///
    /// For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). For more information about the Collection Format, see the [Postman Collection Format documentation](https://learning.postman.com/collection-format/getting-started/overview/).
    ///
    /// **Note:**
    ///
    /// To copy another collection's contents to the given collection, remove all ID values before you pass it in this endpoint. If you do not, this endpoint returns an error. These values include the `id`, `uid`, and `postman_id` values.
    /// </summary>
    /// <param name="collectionId">The collection's ID.</param>
    public async Task<PutCollectionOkResponse> PutCollectionAsync(
        PutCollectionRequest input,
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Put, "collections/{collectionId}")
            .SetPathParameter("collectionId", collectionId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PutCollectionOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates specific collection information, such as its name, events, or its variables. For more information about the `auth`, `variables`, and `events` properties, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):
    /// - For `variables`, refer to `../definitions/variable"`.
    /// - For `auth`, refer to `../definitions/auth-attribute"`.
    /// - For `events`, refer to `../definitions/event"`.
    ///
    /// For more information about the Collection Format, see the [Postman Collection Format documentation](https://learning.postman.com/collection-format/getting-started/overview/).
    /// </summary>
    /// <param name="collectionId">The collection's ID.</param>
    public async Task<PatchCollectionOkResponse> PatchCollectionAsync(
        PatchCollectionRequest input,
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Patch, "collections/{collectionId}")
            .SetPathParameter("collectionId", collectionId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PatchCollectionOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Deletes a collection.</summary>
    /// <param name="collectionId">The collection's ID.</param>
    public async Task<DeleteCollection> DeleteCollectionAsync(
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Delete, "collections/{collectionId}")
            .SetPathParameter("collectionId", collectionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<DeleteCollection>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets a list of all the authenticated user's forked collections.</summary>
    /// <param name="collectionId">The collection's ID.</param>
    /// <param name="cursor">The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.</param>
    /// <param name="limit">The maximum number of rows to return in the response.</param>
    /// <param name="direction">Sort the results by creation date in ascending (`asc`) or descending (`desc`) order.</param>
    public async Task<GetCollectionsForkedByUser> GetCollectionsForkedByUserAsync(
        string collectionId,
        string? cursor = null,
        long? limit = null,
        AscDesc? direction = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "collections/{collectionId}/collection-forks"
        )
            .SetPathParameter("collectionId", collectionId)
            .SetOptionalQueryParameter("cursor", cursor)
            .SetOptionalQueryParameter("limit", limit)
            .SetOptionalQueryParameter("direction", direction?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetCollectionsForkedByUser>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets all comments left by users in a collection.</summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    public async Task<CommentResponse> GetCollectionCommentsAsync(
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Get, "collections/{collectionId}/comments")
            .SetPathParameter("collectionId", collectionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CommentResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Creates a comment on a collection.
    ///
    /// **Note:**
    ///
    /// This endpoint accepts a max of 10,000 characters.
    /// </summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    public async Task<CommentCreatedUpdated> CreateCollectionCommentAsync(
        CommentCreateUpdate input,
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Post, "collections/{collectionId}/comments")
            .SetPathParameter("collectionId", collectionId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CommentCreatedUpdated>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates a comment on a collection.
    ///
    /// **Note:**
    ///
    /// This endpoint accepts a max of 10,000 characters.
    /// </summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    /// <param name="commentId">The comment's ID.</param>
    public async Task<CommentCreatedUpdated> UpdateCollectionCommentAsync(
        CommentCreateUpdate input,
        string collectionId,
        long commentId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "collections/{collectionId}/comments/{commentId}"
        )
            .SetPathParameter("collectionId", collectionId)
            .SetPathParameter("commentId", commentId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<CommentCreatedUpdated>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Deletes a comment from a collection. On success, this returns an HTTP `204 No Content` response
    ///
    /// **Note:**
    ///
    /// Deleting the first comment of a thread deletes all the comments in the thread.
    /// </summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    /// <param name="commentId">The comment's ID.</param>
    public async Task DeleteCollectionCommentAsync(
        string collectionId,
        long commentId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(
            HttpMethod.Delete,
            "collections/{collectionId}/comments/{commentId}"
        )
            .SetPathParameter("collectionId", collectionId)
            .SetPathParameter("commentId", commentId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();
    }

    /// <summary>Gets a collection's forked collections. The response returns data for each fork, such as the fork's ID, the user who forked it, and the fork's  creation date.</summary>
    /// <param name="collectionId">The collection's ID.</param>
    /// <param name="cursor">The pointer to the first record of the set of paginated results. To view the next response, use the `nextCursor` value for this parameter.</param>
    /// <param name="limit">The maximum number of rows to return in the response.</param>
    /// <param name="direction">Sort the results by creation date in ascending (`asc`) or descending (`desc`) order.</param>
    public async Task<GetCollectionForks> GetCollectionForksAsync(
        string collectionId,
        string? cursor = null,
        long? limit = null,
        AscDesc? direction = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Get, "collections/{collectionId}/forks")
            .SetPathParameter("collectionId", collectionId)
            .SetOptionalQueryParameter("cursor", cursor)
            .SetOptionalQueryParameter("limit", limit)
            .SetOptionalQueryParameter("direction", direction?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetCollectionForks>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Pulls the changes from a parent (source) collection into the forked collection. In the endpoint's response:
    ///
    /// - The `destinationId` is the ID of the forked collection.
    /// - The `sourceId` is the ID of the source collection.
    /// </summary>
    /// <param name="collectionId">The collection's ID.</param>
    public async Task<PullCollectionChanges> PullCollectionChangesAsync(
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Put, "collections/{collectionId}/pulls")
            .SetPathParameter("collectionId", collectionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PullCollectionChanges>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets information about a collection's pull requests, such as the source and destination IDs, status of the pull requests, and a URL link to the pull requests.</summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    public async Task<GetCollectionPullRequests> GetCollectionPullRequestsAsync(
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Get, "collections/{collectionId}/pull-requests")
            .SetPathParameter("collectionId", collectionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetCollectionPullRequests>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Creates a pull request for a forked collection into its parent collection.</summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    public async Task<PullRequestCreated> CreateCollectionPullRequestAsync(
        PullRequestCreate input,
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "collections/{collectionId}/pull-requests"
        )
            .SetPathParameter("collectionId", collectionId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<PullRequestCreated>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets information about all roles in a collection. The response returns the IDs of all users, teams, and groups with access to view or edit the collection.</summary>
    /// <param name="collectionId">The collection's ID.</param>
    public async Task<GetCollectionRoles> GetCollectionRolesAsync(
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Get, "collections/{collectionId}/roles")
            .SetPathParameter("collectionId", collectionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetCollectionRoles>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates the roles of users, groups, or teams in a collection. On success, this returns a `204 No Content` response.
    ///
    /// **Note:**
    ///
    /// - Only users assigned the EDITOR [role](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#collection-roles) in the collection can use this endpoint.
    /// - This endpoint does not support the external [Partner or Guest roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
    /// </summary>
    /// <param name="collectionId">The collection's ID.</param>
    public async Task UpdateCollectionRolesAsync(
        UpdateCollectionRoles input,
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Patch, "collections/{collectionId}/roles")
            .SetPathParameter("collectionId", collectionId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();
    }

    /// <summary>
    /// Checks whether there is a change between the forked collection and its parent (source) collection.
    ///
    /// If the value of the `isSourceAhead` property is `true` in the response, then there is a difference between the forked collection and its source collection.
    ///
    /// **Note:**
    ///
    /// This endpoint may take a few minutes to return an updated `isSourceAhead` status.
    /// </summary>
    /// <param name="collectionId">The collection's ID.</param>
    public async Task<GetSourceCollectionStatus> GetSourceCollectionStatusAsync(
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Get, "collections/{collectionId}/source-status")
            .SetPathParameter("collectionId", collectionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetSourceCollectionStatus>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Transforms an existing Postman Collection into a stringified OpenAPI definition.
    ///
    /// **Note:**
    ///
    /// This does not create an API.
    /// </summary>
    /// <param name="collectionId">The collection's ID.</param>
    /// <param name="format">Return the OpenAPI definition in the given format.</param>
    public async Task<TransformCollectionToOpenApi> TransformCollectionToOpenApiAsync(
        string collectionId,
        Format? format = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "collections/{collectionId}/transformations"
        )
            .SetPathParameter("collectionId", collectionId)
            .SetOptionalQueryParameter("format", format?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<TransformCollectionToOpenApi>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Copies or moves folders into a collection or folder.</summary>
    public async Task<TransferCollectionItems200Error> TransferCollectionFoldersAsync(
        TransferCollectionItems input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "collection-folders-transfers")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<TransferCollectionItems200Error>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Copies or moves requests into a collection or folder.</summary>
    public async Task<TransferCollectionItems200Error> TransferCollectionRequestsAsync(
        TransferCollectionItems input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "collection-requests-transfers")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<TransferCollectionItems200Error>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Copies or moves responses into a request.</summary>
    public async Task<TransferCollectionItems200Error> TransferCollectionResponsesAsync(
        TransferCollectionItems input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "collection-responses-transfers")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<TransferCollectionItems200Error>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
