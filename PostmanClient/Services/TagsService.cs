// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using PostmanClient.Http;
using PostmanClient.Http.Exceptions;
using PostmanClient.Http.Extensions;
using PostmanClient.Http.Serialization;
using PostmanClient.Models;

namespace PostmanClient.Services;

public class TagsService : BaseService
{
    internal TagsService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Gets all the tags associated with an API.</summary>
    /// <param name="apiId">The API's unique ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<TagGetPut> GetApiTagsAsync(
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Get, "apis/{apiId}/tags")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<TagGetPut>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Updates an API's associated tags. This endpoint replaces all existing tags with those you pass in the request body.</summary>
    /// <param name="apiId">The API's unique ID.</param>
    /// <param name="accept">The `application/vnd.api.v10+json` request header required to use the endpoint.</param>
    public async Task<TagGetPut> UpdateApiTagsAsync(
        TagUpdateTags input,
        string apiId,
        Accept accept,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(apiId, nameof(apiId));
        ArgumentNullException.ThrowIfNull(accept, nameof(accept));

        var request = new RequestBuilder(HttpMethod.Put, "apis/{apiId}/tags")
            .SetPathParameter("apiId", apiId)
            .SetHeader("Accept", accept.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<TagGetPut>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets all the tags associated with a collection.</summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    public async Task<TagGetPut> GetCollectionTagsAsync(
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Get, "collections/{collectionId}/tags")
            .SetPathParameter("collectionId", collectionId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<TagGetPut>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Updates a collection's associated tags. This endpoint replaces all existing tags with those you pass in the request body.</summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    public async Task<TagGetPut> UpdateCollectionTagsAsync(
        TagUpdateTags input,
        string collectionId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));

        var request = new RequestBuilder(HttpMethod.Put, "collections/{collectionId}/tags")
            .SetPathParameter("collectionId", collectionId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<TagGetPut>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Gets Postman elements (entities) by a given tag. Tags enable you to organize and search [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#tagging-a-workspace), [APIs](https://learning.postman.com/docs/designing-and-developing-your-api/managing-apis/#tagging-apis), and [collections](https://learning.postman.com/docs/collections/using-collections/#tagging-a-collection) that contain shared tags.
    ///
    /// **Note:**
    ///
    /// Tagging is available on Postman [**Enterprise** plans](https://www.postman.com/pricing/).
    /// </summary>
    /// <param name="slug">The tag's ID within a team or individual (non-team) user scope.</param>
    /// <param name="limit">The maximum number of tagged elements to return in a single call.</param>
    /// <param name="direction">The ascending (`asc`) or descending (`desc`) order to sort the results by, based on the time of the entity's tagging.</param>
    /// <param name="cursor">The cursor to get the next set of results in the paginated response. If you pass an invalid value, the API only returns the first set of results.</param>
    /// <param name="entityType">Filter results for the given entity type.</param>
    public async Task<GetTaggedEntities> GetTaggedEntitiesAsync(
        string slug,
        long? limit = null,
        AscDescDefaultDesc? direction = null,
        string? cursor = null,
        GetTaggedEntitiesEntityType? entityType = null,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(slug, nameof(slug));

        var request = new RequestBuilder(HttpMethod.Get, "tags/{slug}/entities")
            .SetPathParameter("slug", slug)
            .SetOptionalQueryParameter("limit", limit)
            .SetOptionalQueryParameter("direction", direction?.Value)
            .SetOptionalQueryParameter("cursor", cursor)
            .SetOptionalQueryParameter("entityType", entityType?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetTaggedEntities>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets all the tags associated with a workspace.</summary>
    /// <param name="workspaceId">The workspace's ID.</param>
    public async Task<TagGetPut> GetWorkspaceTagsAsync(
        string workspaceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(workspaceId, nameof(workspaceId));

        var request = new RequestBuilder(HttpMethod.Get, "workspaces/{workspaceId}/tags")
            .SetPathParameter("workspaceId", workspaceId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<TagGetPut>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Updates a workspace's associated tags. This endpoint replaces all existing tags with those you pass in the request body.</summary>
    /// <param name="workspaceId">The workspace's ID.</param>
    public async Task<TagGetPut> UpdateWorkspaceTagsAsync(
        TagUpdateTags input,
        string workspaceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(workspaceId, nameof(workspaceId));

        var request = new RequestBuilder(HttpMethod.Put, "workspaces/{workspaceId}/tags")
            .SetPathParameter("workspaceId", workspaceId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<TagGetPut>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
