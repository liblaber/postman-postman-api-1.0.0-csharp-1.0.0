// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using PostmanClient.Http;
using PostmanClient.Http.Serialization;
using PostmanClient.Models;
using PostmanClient.OneOf;

namespace PostmanClient.Services;

public class PrivateApiNetworkService : BaseService
{
    internal PrivateApiNetworkService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>
    /// Gets information about the folders and their elements added to your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
    ///
    /// **Note:**
    ///
    /// The `limit` and `offset` parameters are separately applied to elements and folders. For example, if you query a `limit` value of `10` and an `offset` value `0`, the endpoint returns 10 elements and 10 folders for a total of 20 items. The `totalCount` property in the `meta` response is the total count of both elements and folders.
    /// </summary>
    /// <param name="since">Return only results created since the given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be later than the `until` value.</param>
    /// <param name="until">Return only results created until this given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be earlier than the `since` value.</param>
    /// <param name="addedBy">Return only elements published by the given user ID.</param>
    /// <param name="name">Return only elements whose name includes the given value. Matching is not case-sensitive.</param>
    /// <param name="summary">Return only elements whose summary includes the given value. Matching is not case-sensitive.</param>
    /// <param name="description">Return only elements whose description includes the given value. Matching is not case-sensitive.</param>
    /// <param name="sort">Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.</param>
    /// <param name="direction">Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive. If you use this query parameter, you must also use the `sort` parameter.</param>
    /// <param name="createdBy">Return only results created by the given user ID.</param>
    /// <param name="offset">The zero-based offset of the first item to return.</param>
    /// <param name="limit">The maximum number of elements to return. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.</param>
    /// <param name="parentFolderId">Return the folders and elements in a specific folder. If this value is `0`, then the endpoint only returns the root folder's elements.</param>
    /// <param name="type_">Filter by the element type.</param>
    public async Task<GetPanElementsAndFolders> GetAllElementsAndFoldersAsync(
        string? since = null,
        string? until = null,
        long? addedBy = null,
        string? name = null,
        string? summary = null,
        string? description = null,
        GetAllElementsAndFoldersSort? sort = null,
        AscDesc? direction = null,
        long? createdBy = null,
        long? offset = null,
        long? limit = null,
        long? parentFolderId = null,
        GetAllElementsAndFoldersType? type_ = null,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "network/private")
            .SetOptionalQueryParameter("since", since)
            .SetOptionalQueryParameter("until", until)
            .SetOptionalQueryParameter("addedBy", addedBy)
            .SetOptionalQueryParameter("name", name)
            .SetOptionalQueryParameter("summary", summary)
            .SetOptionalQueryParameter("description", description)
            .SetOptionalQueryParameter("sort", sort?.Value)
            .SetOptionalQueryParameter("direction", direction?.Value)
            .SetOptionalQueryParameter("createdBy", createdBy)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("limit", limit)
            .SetOptionalQueryParameter("parentFolderId", parentFolderId)
            .SetOptionalQueryParameter("type", type_?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetPanElementsAndFolders>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Publishes a element or creates a folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). An element is a Postman API, collection, or workspace.
    ///
    /// **Note:**
    ///
    /// You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.
    /// </summary>
    public async Task<OneOf<PanElementCreated, PanFolderCreated>> PostPanElementOrFolderAsync(
        PanCreateApi input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "network/private")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<OneOf<PanElementCreated, PanFolderCreated>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Publishes a element or creates a folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). An element is a Postman API, collection, or workspace.
    ///
    /// **Note:**
    ///
    /// You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.
    /// </summary>
    public async Task<OneOf<PanElementCreated, PanFolderCreated>> PostPanElementOrFolderAsync(
        PanCreateCollection input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "network/private")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<OneOf<PanElementCreated, PanFolderCreated>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Publishes a element or creates a folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). An element is a Postman API, collection, or workspace.
    ///
    /// **Note:**
    ///
    /// You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.
    /// </summary>
    public async Task<OneOf<PanElementCreated, PanFolderCreated>> PostPanElementOrFolderAsync(
        PanCreateWorkspace input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "network/private")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<OneOf<PanElementCreated, PanFolderCreated>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Publishes a element or creates a folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). An element is a Postman API, collection, or workspace.
    ///
    /// **Note:**
    ///
    /// You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.
    /// </summary>
    public async Task<OneOf<PanElementCreated, PanFolderCreated>> PostPanElementOrFolderAsync(
        PanCreateFolder input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "network/private")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<OneOf<PanElementCreated, PanFolderCreated>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates an element or folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
    ///
    /// **Note:**
    ///
    /// You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.
    /// </summary>
    /// <param name="elementId">The element's ID or UUID. For Postman Collections you must pass the collection's UID (`userId`-`collectionId`) value.</param>
    /// <param name="elementType">The element type.</param>
    public async Task<OneOf<PanElementCreated, PanFolderCreated>> UpdatePanElementOrFolderAsync(
        UpdatePanApi input,
        string elementId,
        UpdatePanElementOrFolderElementType elementType,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(elementId, nameof(elementId));
        ArgumentNullException.ThrowIfNull(elementType, nameof(elementType));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "network/private/{elementType}/{elementId}"
        )
            .SetPathParameter("elementId", elementId)
            .SetPathParameter("elementType", elementType.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<OneOf<PanElementCreated, PanFolderCreated>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates an element or folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
    ///
    /// **Note:**
    ///
    /// You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.
    /// </summary>
    /// <param name="elementId">The element's ID or UUID. For Postman Collections you must pass the collection's UID (`userId`-`collectionId`) value.</param>
    /// <param name="elementType">The element type.</param>
    public async Task<OneOf<PanElementCreated, PanFolderCreated>> UpdatePanElementOrFolderAsync(
        UpdatePanCollection input,
        string elementId,
        UpdatePanElementOrFolderElementType elementType,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(elementId, nameof(elementId));
        ArgumentNullException.ThrowIfNull(elementType, nameof(elementType));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "network/private/{elementType}/{elementId}"
        )
            .SetPathParameter("elementId", elementId)
            .SetPathParameter("elementType", elementType.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<OneOf<PanElementCreated, PanFolderCreated>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates an element or folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
    ///
    /// **Note:**
    ///
    /// You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.
    /// </summary>
    /// <param name="elementId">The element's ID or UUID. For Postman Collections you must pass the collection's UID (`userId`-`collectionId`) value.</param>
    /// <param name="elementType">The element type.</param>
    public async Task<OneOf<PanElementCreated, PanFolderCreated>> UpdatePanElementOrFolderAsync(
        UpdatePanWorkspace input,
        string elementId,
        UpdatePanElementOrFolderElementType elementType,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(elementId, nameof(elementId));
        ArgumentNullException.ThrowIfNull(elementType, nameof(elementType));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "network/private/{elementType}/{elementId}"
        )
            .SetPathParameter("elementId", elementId)
            .SetPathParameter("elementType", elementType.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<OneOf<PanElementCreated, PanFolderCreated>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates an element or folder in your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
    ///
    /// **Note:**
    ///
    /// You can only pass one element object type per call. For example, you cannot pass both `api` and `collection` in a single request.
    /// </summary>
    /// <param name="elementId">The element's ID or UUID. For Postman Collections you must pass the collection's UID (`userId`-`collectionId`) value.</param>
    /// <param name="elementType">The element type.</param>
    public async Task<OneOf<PanElementCreated, PanFolderCreated>> UpdatePanElementOrFolderAsync(
        UpdatePanFolder input,
        string elementId,
        UpdatePanElementOrFolderElementType elementType,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(elementId, nameof(elementId));
        ArgumentNullException.ThrowIfNull(elementType, nameof(elementType));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "network/private/{elementType}/{elementId}"
        )
            .SetPathParameter("elementId", elementId)
            .SetPathParameter("elementType", elementType.Value)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<OneOf<PanElementCreated, PanFolderCreated>>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Removes an element or delete a folder from your [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).
    /// **Note:**
    /// Removing an API, collection, or workspace element does not delete it. It only removes it from the Private API Network folder.
    /// </summary>
    /// <param name="elementId">The element's ID or UUID. For Postman Collections you must pass the collection's UID (`userId`-`collectionId`) value.</param>
    /// <param name="elementType">The element type.</param>
    public async Task<DeletePanElementOrFolder> DeletePanElementOrFolderAsync(
        string elementId,
        UpdatePanElementOrFolderElementType elementType,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(elementId, nameof(elementId));
        ArgumentNullException.ThrowIfNull(elementType, nameof(elementType));

        var request = new RequestBuilder(
            HttpMethod.Delete,
            "network/private/{elementType}/{elementId}"
        )
            .SetPathParameter("elementId", elementId)
            .SetPathParameter("elementType", elementType.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<DeletePanElementOrFolder>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets a list requests to add elements to the [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/).</summary>
    /// <param name="since">Return only results created since the given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be later than the `until` value.</param>
    /// <param name="until">Return only results created until this given time, in [ISO 8601](https://datatracker.ietf.org/doc/html/rfc3339#section-5.6) format. This value cannot be earlier than the `since` value.</param>
    /// <param name="requestedBy">Return a user's element requests by their user ID.</param>
    /// <param name="type_">Filter by the element type.</param>
    /// <param name="status">Filter by the request status.</param>
    /// <param name="name">Return only elements whose name includes the given value. Matching is not case-sensitive.</param>
    /// <param name="sort">Sort the results by the given value. If you use this query parameter, you must also use the `direction` parameter.</param>
    /// <param name="direction">Sort in ascending (`asc`) or descending (`desc`) order. Matching is not case-sensitive. If you use this query parameter, you must also use the `sort` parameter.</param>
    /// <param name="offset">The zero-based offset of the first item to return.</param>
    /// <param name="limit">The maximum number of elements to return. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.</param>
    public async Task<GetAllPanAddElementRequests> GetAllPanAddElementRequestsAsync(
        string? since = null,
        string? until = null,
        long? requestedBy = null,
        GetAllElementsAndFoldersType? type_ = null,
        GetAllPanAddElementRequestsStatus? status = null,
        string? name = null,
        GetAllElementsAndFoldersSort? sort = null,
        AscDesc? direction = null,
        long? offset = null,
        long? limit = null,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(
            HttpMethod.Get,
            "network/private/network-entity/request/all"
        )
            .SetOptionalQueryParameter("since", since)
            .SetOptionalQueryParameter("until", until)
            .SetOptionalQueryParameter("requestedBy", requestedBy)
            .SetOptionalQueryParameter("type", type_?.Value)
            .SetOptionalQueryParameter("status", status?.Value)
            .SetOptionalQueryParameter("name", name)
            .SetOptionalQueryParameter("sort", sort?.Value)
            .SetOptionalQueryParameter("direction", direction?.Value)
            .SetOptionalQueryParameter("offset", offset)
            .SetOptionalQueryParameter("limit", limit)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<GetAllPanAddElementRequests>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Responds to a request to add an element to the [Private API Network](https://learning.postman.com/docs/collaborating-in-postman/adding-private-network/). Only managers can approve or deny a request. Once approved, the element will appear in the team's Private API Network.</summary>
    /// <param name="requestId">The element request's ID.</param>
    public async Task<RespondPanElementAddRequestOkResponse> RespondPanElementAddRequestAsync(
        PrivateApiNetworkRespondPanElementAddRequestRequest1 input,
        long requestId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "network/private/network-entity/request/{requestId}"
        )
            .SetPathParameter("requestId", requestId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);
        response.EnsureSuccessStatusCode();

        return await response
                .Content.ReadFromJsonAsync<RespondPanElementAddRequestOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
