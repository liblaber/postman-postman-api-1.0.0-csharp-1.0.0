// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using PostmanClient.Http;
using PostmanClient.Http.Exceptions;
using PostmanClient.Http.Extensions;
using PostmanClient.Http.Serialization;
using PostmanClient.Models;

namespace PostmanClient.Services;

public class CollectionRequestsService : BaseService
{
    internal CollectionRequestsService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Gets all comments left by users in a request.</summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    /// <param name="requestId">The request's unique ID.</param>
    public async Task<CommentResponse> GetRequestCommentsAsync(
        string collectionId,
        string requestId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));
        ArgumentNullException.ThrowIfNull(requestId, nameof(requestId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "collections/{collectionId}/requests/{requestId}/comments"
        )
            .SetPathParameter("collectionId", collectionId)
            .SetPathParameter("requestId", requestId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<CommentResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Creates a comment on a request.
    ///
    /// **Note:**
    ///
    /// This endpoint accepts a max of 10,000 characters.
    /// </summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    /// <param name="requestId">The request's unique ID.</param>
    public async Task<CommentCreatedUpdated> CreateRequestCommentAsync(
        CommentCreateUpdate input,
        string collectionId,
        string requestId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));
        ArgumentNullException.ThrowIfNull(requestId, nameof(requestId));

        var request = new RequestBuilder(
            HttpMethod.Post,
            "collections/{collectionId}/requests/{requestId}/comments"
        )
            .SetPathParameter("collectionId", collectionId)
            .SetPathParameter("requestId", requestId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<CommentCreatedUpdated>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates a comment on a request.
    ///
    /// **Note:**
    ///
    /// This endpoint accepts a max of 10,000 characters.
    /// </summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    /// <param name="requestId">The request's unique ID.</param>
    /// <param name="commentId">The comment's ID.</param>
    public async Task<CommentCreatedUpdated> UpdateRequestCommentAsync(
        CommentCreateUpdate input,
        string collectionId,
        string requestId,
        long commentId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));
        ArgumentNullException.ThrowIfNull(requestId, nameof(requestId));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "collections/{collectionId}/requests/{requestId}/comments/{commentId}"
        )
            .SetPathParameter("collectionId", collectionId)
            .SetPathParameter("requestId", requestId)
            .SetPathParameter("commentId", commentId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<CommentCreatedUpdated>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Deletes a comment from a request. On success, this returns an HTTP `204 No Content` response
    ///
    /// **Note:**
    ///
    /// Deleting the first comment of a thread deletes all the comments in the thread.
    /// </summary>
    /// <param name="collectionId">The collection's unique ID.</param>
    /// <param name="requestId">The request's unique ID.</param>
    /// <param name="commentId">The comment's ID.</param>
    public async Task DeleteRequestCommentAsync(
        string collectionId,
        string requestId,
        long commentId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(collectionId, nameof(collectionId));
        ArgumentNullException.ThrowIfNull(requestId, nameof(requestId));

        var request = new RequestBuilder(
            HttpMethod.Delete,
            "collections/{collectionId}/requests/{requestId}/comments/{commentId}"
        )
            .SetPathParameter("collectionId", collectionId)
            .SetPathParameter("requestId", requestId)
            .SetPathParameter("commentId", commentId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        response.EnsureSuccessfulResponse();
    }
}
