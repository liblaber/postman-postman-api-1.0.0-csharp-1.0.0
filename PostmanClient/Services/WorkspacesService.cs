// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Headers;
using System.Net.Http.Json;
using PostmanClient.Http;
using PostmanClient.Http.Exceptions;
using PostmanClient.Http.Extensions;
using PostmanClient.Http.Serialization;
using PostmanClient.Models;

namespace PostmanClient.Services;

public class WorkspacesService : BaseService
{
    internal WorkspacesService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>
    /// Gets all [workspaces](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/). The response includes your workspaces and any workspaces that you have access to.
    ///
    /// **Note:**
    ///
    /// This endpoint's response contains the visibility field. Visibility determines who can access the workspace:
    /// - `personal` — Only you can access the workspace.
    /// - `team` — All team members can access the workspace.
    /// - `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
    /// - `public` — Everyone can access the workspace.
    /// - `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
    /// </summary>
    /// <param name="type_">The type of workspace to filter the response by.</param>
    /// <param name="createdBy">Return only workspaces created by a specific user ID. For multiple users, pass this value as a comma-separated list of user IDs. The response only returns workspaces that you have access to.</param>
    /// <param name="include">
    /// Include the following information in the endpoint's response:
    /// - `mocks:deactivated` — Include all deactivated mock servers in the response.
    /// </param>
    public async Task<GetWorkspaces> GetWorkspacesAsync(
        GetWorkspacesType? type_ = null,
        long? createdBy = null,
        GetWorkspacesInclude? include = null,
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "workspaces")
            .SetOptionalQueryParameter("type", type_?.Value)
            .SetOptionalQueryParameter("createdBy", createdBy)
            .SetOptionalQueryParameter("include", include?.Value)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetWorkspaces>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Creates a new [workspace](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/creating-workspaces/).
    ///
    /// **Note:**
    ///
    /// This endpoint returns a 403 `Forbidden` response if the user does not have permission to create workspaces. [Admins and Super Admins](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles) can configure workspace permissions to restrict users and/or user groups from creating workspaces or require approvals for the creation of team workspaces.
    ///
    /// ### Important
    ///
    /// We deprecated linking collections or environments between workspaces. We do not recommend that you do this.
    ///
    /// If you have a linked collection or environment, note the following:
    /// - The endpoint does not create a clone of a collection or environment.
    /// - Any changes you make to a linked collection or environment changes them in all workspaces.
    /// - If you delete a collection or environment linked between workspaces, the system deletes it in all the workspaces.
    /// </summary>
    public async Task<CreateWorkspaceOkResponse> CreateWorkspaceAsync(
        CreateWorkspaceRequest input,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));

        var request = new RequestBuilder(HttpMethod.Post, "workspaces")
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<CreateWorkspaceOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Gets information about all roles in a workspace, based on the team's [plan](https://www.postman.com/pricing/).
    /// </summary>
    public async Task<GetWorkspaceRoles> GetWorkspaceRolesAsync(
        CancellationToken cancellationToken = default
    )
    {
        var request = new RequestBuilder(HttpMethod.Get, "workspaces-roles").Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetWorkspaceRoles>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Gets information about a workspace.
    ///
    /// **Note:**
    ///
    /// This endpoint's response contains the `visibility` field. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:
    /// - `personal` — Only you can access the workspace.
    /// - `team` — All team members can access the workspace.
    /// - `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
    /// - `public` — Everyone can access the workspace.
    /// - `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
    ///
    /// ### Important
    ///
    /// We have deprecated the `name` and `uid` responses in the following array of objects:
    /// - `collections`
    /// - `environments`
    /// - `mocks`
    /// - `monitors`
    /// - `apis`
    /// </summary>
    /// <param name="workspaceId">The workspace's ID.</param>
    public async Task<GetWorkspace> GetWorkspaceAsync(
        string workspaceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(workspaceId, nameof(workspaceId));

        var request = new RequestBuilder(HttpMethod.Get, "workspaces/{workspaceId}")
            .SetPathParameter("workspaceId", workspaceId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetWorkspace>(_jsonSerializerOptions, cancellationToken)
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates a workspace.
    ///
    /// ### Important
    ///
    /// We deprecated linking collections or environments between workspaces. We do not recommend that you do this.
    ///
    /// If you have a linked collection or environment, note the following:
    /// - The endpoint does not create a clone of a collection or environment.
    /// - Any changes you make to a linked collection or environment changes them in all workspaces.
    /// - If you delete a collection or environment linked between workspaces, the system deletes it in all the workspaces.
    /// </summary>
    /// <param name="workspaceId">The workspace's ID.</param>
    public async Task<UpdateWorkspaceOkResponse> UpdateWorkspaceAsync(
        UpdateWorkspaceRequest input,
        string workspaceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(workspaceId, nameof(workspaceId));

        var request = new RequestBuilder(HttpMethod.Put, "workspaces/{workspaceId}")
            .SetPathParameter("workspaceId", workspaceId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<UpdateWorkspaceOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Deletes an existing workspace.
    ///
    /// ### Important
    ///
    /// If you delete a workspace that has a linked collection or environment with another workspace, this will delete the collection and environment in all workspaces.
    /// </summary>
    /// <param name="workspaceId">The workspace's ID.</param>
    public async Task<DeleteWorkspace> DeleteWorkspaceAsync(
        string workspaceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(workspaceId, nameof(workspaceId));

        var request = new RequestBuilder(HttpMethod.Delete, "workspaces/{workspaceId}")
            .SetPathParameter("workspaceId", workspaceId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<DeleteWorkspace>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Gets a workspace's global [variables](https://learning.postman.com/docs/sending-requests/variables/#variable-scopes).</summary>
    /// <param name="workspaceId">The workspace's ID.</param>
    public async Task<GetWorkspaceGlobalVariables> GetWorkspaceGlobalVariablesAsync(
        string workspaceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(workspaceId, nameof(workspaceId));

        var request = new RequestBuilder(
            HttpMethod.Get,
            "workspaces/{workspaceId}/global-variables"
        )
            .SetPathParameter("workspaceId", workspaceId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<GetWorkspaceGlobalVariables>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Updates and replaces a workspace's global [variables](https://learning.postman.com/docs/sending-requests/variables/#variable-scopes). This endpoint replaces all existing global variables with the variables you pass in the request body.</summary>
    /// <param name="workspaceId">The workspace's ID.</param>
    public async Task<UpdateWorkspaceGlobalVariablesOkResponse> UpdateWorkspaceGlobalVariablesAsync(
        UpdateWorkspaceGlobalVariablesRequest input,
        string workspaceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(workspaceId, nameof(workspaceId));

        var request = new RequestBuilder(
            HttpMethod.Put,
            "workspaces/{workspaceId}/global-variables"
        )
            .SetPathParameter("workspaceId", workspaceId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<UpdateWorkspaceGlobalVariablesOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>
    /// Updates the roles of [users](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles) or [user groups](https://learning.postman.com/docs/collaborating-in-postman/user-groups/) in a workspace. To get a list of roles, use the `GET /workspace-roles` endpoint.
    ///
    /// **Note:**
    ///
    /// - This endpoint does not support the external [Partner or Guest roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).
    /// - This endpoint is restricted to 50 operations per call.
    /// - The request body must contain one unique action per user or user group. For example, you cannot add and remove multiple roles for a user in the same request body.
    /// </summary>
    /// <param name="workspaceId">The workspace's ID.</param>
    public async Task<UpdateWorkspaceRolesOkResponse> UpdateWorkspaceRolesAsync(
        UpdateWorkspaceRolesRequest input,
        string workspaceId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(workspaceId, nameof(workspaceId));

        var request = new RequestBuilder(HttpMethod.Patch, "workspaces/{workspaceId}/roles")
            .SetPathParameter("workspaceId", workspaceId)
            .SetContentAsJson(
                input,
                _jsonSerializerOptions,
                MediaTypeHeaderValue.Parse("application/json-patch+json")
            )
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<UpdateWorkspaceRolesOkResponse>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
