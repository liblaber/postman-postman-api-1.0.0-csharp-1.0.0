// This file was generated by liblab | https://liblab.com/

using System.Net.Http.Json;
using PostmanClient.Http;
using PostmanClient.Http.Exceptions;
using PostmanClient.Http.Extensions;
using PostmanClient.Http.Serialization;
using PostmanClient.Models;

namespace PostmanClient.Services;

public class PullRequestsService : BaseService
{
    internal PullRequestsService(HttpClient httpClient)
        : base(httpClient) { }

    /// <summary>Gets information about a pull request, such as the source and destination details, who reviewed the pull request, the merge's current status, and whether the element is accessible.</summary>
    /// <param name="pullRequestId">The pull request's ID.</param>
    public async Task<PullRequestGet> GetPullRequestAsync(
        string pullRequestId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(pullRequestId, nameof(pullRequestId));

        var request = new RequestBuilder(HttpMethod.Get, "pull-requests/{pullRequestId}")
            .SetPathParameter("pullRequestId", pullRequestId)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PullRequestGet>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }

    /// <summary>Updates an open pull request.</summary>
    /// <param name="pullRequestId">The pull request's ID.</param>
    public async Task<PullRequestUpdated> UpdatePullRequestAsync(
        PullRequestUpdate input,
        string pullRequestId,
        CancellationToken cancellationToken = default
    )
    {
        ArgumentNullException.ThrowIfNull(input, nameof(input));
        ArgumentNullException.ThrowIfNull(pullRequestId, nameof(pullRequestId));

        var request = new RequestBuilder(HttpMethod.Put, "pull-requests/{pullRequestId}")
            .SetPathParameter("pullRequestId", pullRequestId)
            .SetContentAsJson(input, _jsonSerializerOptions)
            .Build();

        var response = await _httpClient
            .SendAsync(request, cancellationToken)
            .ConfigureAwait(false);

        return await response
                .EnsureSuccessfulResponse()
                .Content.ReadFromJsonAsync<PullRequestUpdated>(
                    _jsonSerializerOptions,
                    cancellationToken
                )
                .ConfigureAwait(false) ?? throw new Exception("Failed to deserialize response.");
    }
}
