// This file was generated by liblab | https://liblab.com/

namespace PostmanClient.OneOf;

public class OneOf<Type0, Type1> : IOneOf
{
    public int Index { get; private set; }
    private Type0? _value0;
    private Type1? _value1;

    public OneOf() { }

    public OneOf(Type0 t)
    {
        Index = 0;
        _value0 = t;
        _value1 = default;
    }

    public OneOf(Type1 t)
    {
        Index = 1;
        _value0 = default;
        _value1 = t;
    }

    public static implicit operator OneOf<Type0, Type1>(Type0 t) => new(t);

    public static implicit operator OneOf<Type0, Type1>(Type1 t) => new(t);

    public object? Value =>
        Index switch
        {
            0 => _value0,
            1 => _value1,
            _ => throw new InvalidOperationException()
        };

    public void InitializeFromObject(int index, object obj)
    {
        Index = index;
        switch (index)
        {
            case 0:
                _value0 = (Type0)obj;
                break;
            case 1:
                _value1 = (Type1)obj;
                break;
            default:
                throw new InvalidOperationException();
        }
    }

    private bool IsType0 => Index == 0;
    private bool IsType1 => Index == 1;

    public Type0? AsType0 =>
        Index == 0
            ? _value0
            : throw new InvalidOperationException(
                $"Cannot return as Type0 as result is Type{Index}"
            );
    public Type1? AsType1 =>
        Index == 1
            ? _value1
            : throw new InvalidOperationException(
                $"Cannot return as Type1 as result is Type{Index}"
            );

    /// <summary>
    /// Specify the action to perform for each type.
    /// </summary>
    public void Switch(Action<Type0> f0, Action<Type1> f1)
    {
        if (Index == 0 && _value0 is not null)
        {
            f0(_value0);
            return;
        }
        if (Index == 1 && _value1 is not null)
        {
            f1(_value1);
            return;
        }

        throw new InvalidOperationException();
    }

    /// <summary>
    /// Specify how to match each type to a result.
    /// </summary>
    public TResult Match<TResult>(Func<Type0, TResult> f0, Func<Type1, TResult> f1)
    {
        if (Index == 0 && _value0 is not null)
        {
            return f0(_value0);
        }
        if (Index == 1 && _value1 is not null)
        {
            return f1(_value1);
        }
        throw new InvalidOperationException();
    }

    public static OneOf<Type0, Type1> FromType0(Type0 input) => input;

    public static OneOf<Type0, Type1> FromType1(Type1 input) => input;

    /// <summary>
    /// Tries to pick the type 0.
    /// </summary>
    /// <param name="value">The output parameter to store the picked type.</param>
    /// <returns>True if the type was successfully picked, otherwise false.</returns>
    public bool TryPickType0(out Type0? value)
    {
        value = IsType0 ? AsType0 : default;
        return this.IsType0;
    }

    /// <summary>
    /// Tries to pick the type 1.
    /// </summary>
    /// <param name="value">The output parameter to store the picked type.</param>
    /// <returns>True if the type was successfully picked, otherwise false.</returns>
    public bool TryPickType1(out Type1? value)
    {
        value = IsType1 ? AsType1 : default;
        return this.IsType1;
    }

    private bool Equals(OneOf<Type0, Type1> other) =>
        Index == other.Index
        && Index switch
        {
            0 => Equals(_value0, other._value0),
            1 => Equals(_value1, other._value1),
            _ => false
        };

    public override bool Equals(object? obj)
    {
        if (ReferenceEquals(null, obj))
        {
            return false;
        }

        return obj is OneOf<Type0, Type1> o && Equals(o);
    }

    public override string ToString() =>
        Index switch
        {
            0 => FormatValue(_value0),
            1 => FormatValue(_value1),
            _
                => throw new InvalidOperationException(
                    "Unexpected index, which indicates a problem in the OneOf codegen."
                )
        };

    private static string FormatValue<T>(T value) => $"{typeof(T).FullName}: {value?.ToString()}";

    public override int GetHashCode()
    {
        unchecked
        {
            var hashCode =
                Index switch
                {
                    0 => _value0?.GetHashCode(),
                    1 => _value1?.GetHashCode(),
                    _ => 0
                } ?? 0;
            return (hashCode * 397) ^ Index;
        }
    }
}
