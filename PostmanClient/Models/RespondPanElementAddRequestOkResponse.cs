// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record RespondPanElementAddRequestOkResponse(
    /// <value>Information about the Private API Network request.</value>
    [property:
        JsonPropertyName("request"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<RespondPanElementAddRequestOkResponse.RespondPanElementAddRequestRequest2>? Request_ =
        null
)
{
    public record RespondPanElementAddRequestRequest2(
        /// <value>The request's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Id = null,
        /// <value>The date and time at which the request was created.</value>
        [property:
            JsonPropertyName("createdAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedAt = null,
        /// <value>The ID of the user who created the request.</value>
        [property:
            JsonPropertyName("createdBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? CreatedBy = null,
        /// <value>The user's optional message included in the request.</value>
        [property:
            JsonPropertyName("message"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Message = null,
        /// <value>Information about the response to the element's request. This object only returns when the network manager denied a request with a message.</value>
        [property:
            JsonPropertyName("response"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            RespondPanElementAddRequestRequest2.RequestResponse? Response_ = null,
        /// <value>Information about the requested element.</value>
        [property:
            JsonPropertyName("element"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            RespondPanElementAddRequestRequest2.RequestElement? Element = null,
        /// <value>The request's status.</value>
        [property:
            JsonPropertyName("status"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            RespondPanElementAddRequestRequest2.RequestStatus? Status = null
    )
    {
        /// <summary>Information about the response to the element's request. This object only returns when the network manager denied a request with a message.</summary>
        public record RequestResponse(
            /// <value>The date and time at which the network manager denied the request.</value>
            [property:
                JsonPropertyName("createdAt"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? CreatedAt = null,
            /// <value>The network manager's user ID.</value>
            [property:
                JsonPropertyName("createdBy"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                long? CreatedBy = null,
            /// <value>The network manager's request response message.</value>
            [property:
                JsonPropertyName("message"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Message = null
        );

        /// <summary>Information about the requested element.</summary>
        public record RequestElement(
            /// <value>The element's ID.</value>
            [property:
                JsonPropertyName("id"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Id = null,
            /// <value>The date and time at which the element was approved and added to the Private API Network.</value>
            [property:
                JsonPropertyName("createdAt"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? CreatedAt = null,
            /// <value>The user ID of the user who requested to add the element to the Private API Network.</value>
            [property:
                JsonPropertyName("createdBy"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                long? CreatedBy = null,
            /// <value>The element type.</value>
            [property:
                JsonPropertyName("type"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                RequestElement.ElementType2? Type_ = null,
            /// <value>The element's name.</value>
            [property:
                JsonPropertyName("name"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Name = null,
            /// <value>If applicable, the element's short summary.</value>
            [property: JsonPropertyName("summary")]
                string? Summary = null
        )
        {
            /// <summary>The element type.</summary>
            public record ElementType2 : ValueEnum<string>
            {
                internal ElementType2(string value)
                    : base(value) { }

                public ElementType2()
                    : base("api") { }

                public static ElementType2 Api = new("api");
                public static ElementType2 Workspace = new("workspace");
                public static ElementType2 Collection = new("collection");
            }
        }

        /// <summary>The request's status.</summary>
        public record RequestStatus : ValueEnum<string>
        {
            internal RequestStatus(string value)
                : base(value) { }

            public RequestStatus()
                : base("approved") { }

            public static RequestStatus Approved = new("approved");
            public static RequestStatus Denied = new("denied");
        }
    }
}
