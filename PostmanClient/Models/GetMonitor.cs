// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record GetMonitor(
    [property:
        JsonPropertyName("monitor"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetMonitor.GetMonitorMonitor? Monitor = null
)
{
    public record GetMonitorMonitor(
        /// <value>The monitor's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The monitor's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>The monitor's unique ID.</value>
        [property:
            JsonPropertyName("uid"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Uid = null,
        /// <value>The ID of monitor's owner.</value>
        [property:
            JsonPropertyName("owner"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Owner = null,
        /// <value>The unique ID of the monitor's associated collection.</value>
        [property:
            JsonPropertyName("collectionUid"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CollectionUid = null,
        /// <value>The unique ID of the monitor's associated environment.</value>
        [property:
            JsonPropertyName("environmentUid"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? EnvironmentUid = null,
        /// <value>A list of the monitor's [geographic regions](https://learning.postman.com/docs/monitoring-your-api/setting-up-monitor/#adding-regions).</value>
        [property:
            JsonPropertyName("distribution"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<string>? Distribution = null,
        /// <value>Information about the monitor's previous run.</value>
        [property:
            JsonPropertyName("lastRun"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetMonitorMonitor.LastRun? LastRun_ = null,
        /// <value>Information about the monitor's notification settings.</value>
        [property:
            JsonPropertyName("notifications"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetMonitorMonitor.Notifications? Notifications_ = null,
        /// <value>Information about the monitor's option settings.</value>
        [property:
            JsonPropertyName("options"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetMonitorMonitor.Options? Options_ = null,
        /// <value>Information about the monitor's schedule.</value>
        [property:
            JsonPropertyName("schedule"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetMonitorMonitor.MonitorSchedule2? Schedule = null
    )
    {
        /// <summary>Information about the monitor's previous run.</summary>
        public record LastRun(
            /// <value>The date and time at which the monitor's previous run completed.</value>
            [property:
                JsonPropertyName("finishedAt"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? FinishedAt = null,
            /// <value>The date and time at which the monitor's previous run started.</value>
            [property:
                JsonPropertyName("startedAt"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? StartedAt = null,
            /// <value>Information about the monitor's stats.</value>
            [property:
                JsonPropertyName("stats"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                LastRun.LastRunStats? Stats = null,
            /// <value>The monitor's status after its last run.</value>
            [property:
                JsonPropertyName("status"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Status = null
        )
        {
            /// <summary>Information about the monitor's stats.</summary>
            public record LastRunStats(
                /// <value>Information about the monitor's assertions.</value>
                [property:
                    JsonPropertyName("assertions"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    LastRunStats.StatsAssertions1? Assertions = null,
                /// <value>Information about the monitor's requests.</value>
                [property:
                    JsonPropertyName("requests"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    LastRunStats.StatsRequests1? Requests = null
            )
            {
                /// <summary>Information about the monitor's assertions.</summary>
                public record StatsAssertions1(
                    /// <value>The total number of test failures.</value>
                    [property:
                        JsonPropertyName("failed"),
                        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                    ]
                        double? Failed = null,
                    /// <value>The total number of tests performed.</value>
                    [property:
                        JsonPropertyName("total"),
                        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                    ]
                        double? Total = null
                );

                /// <summary>Information about the monitor's requests.</summary>
                public record StatsRequests1(
                    /// <value>The total number of requests.</value>
                    [property:
                        JsonPropertyName("total"),
                        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                    ]
                        double? Total = null
                );
            }
        }

        /// <summary>Information about the monitor's notification settings.</summary>
        public record Notifications(
            [property:
                JsonPropertyName("onError"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                List<Notifications.OnError>? OnError_ = null,
            [property:
                JsonPropertyName("onFailure"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                List<Notifications.OnFailure>? OnFailure_ = null
        )
        {
            public record OnError(
                /// <value>The email address of the user to notify on monitor error.</value>
                [property:
                    JsonPropertyName("email"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Email = null
            );

            public record OnFailure(
                /// <value>The email address of the user to notify on monitor failure.</value>
                [property:
                    JsonPropertyName("email"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Email = null
            );
        }

        /// <summary>Information about the monitor's option settings.</summary>
        public record Options(
            /// <value>If true, follow redirects enabled.</value>
            [property:
                JsonPropertyName("followRedirects"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? FollowRedirects = null,
            /// <value>The monitor's request delay value.</value>
            [property:
                JsonPropertyName("requestDelay"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                double? RequestDelay = null,
            /// <value>The monitor's request timeout value.</value>
            [property:
                JsonPropertyName("requestTimeout"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                double? RequestTimeout = null,
            /// <value>If true, strict SSL enabled.</value>
            [property:
                JsonPropertyName("strictSSL"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? StrictSsl = null
        );

        /// <summary>Information about the monitor's schedule.</summary>
        public record MonitorSchedule2(
            /// <value>The monitor's cron frequency value.</value>
            [property:
                JsonPropertyName("cron"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Cron = null,
            /// <value>The date and time of monitor's next scheduled run.</value>
            [property:
                JsonPropertyName("nextRun"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? NextRun = null,
            /// <value>The monitor's timezone.</value>
            [property:
                JsonPropertyName("timezone"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Timezone = null
        );
    }
}
