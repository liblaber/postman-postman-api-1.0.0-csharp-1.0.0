// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record CreateScimUserRequest(
    /// <value>The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).</value>
    [property:
        JsonPropertyName("schemas"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<string>? Schemas = null,
    /// <value>The user's username.</value>
    [property:
        JsonPropertyName("userName"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? UserName = null,
    /// <value>If true, activates the user. This lets them authenticate in to your Postman team.</value>
    [property:
        JsonPropertyName("active"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? Active = null,
    /// <value>The user's external ID.</value>
    [property:
        JsonPropertyName("externalId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? ExternalId = null,
    /// <value>A list of groups to assign the user to.</value>
    [property:
        JsonPropertyName("groups"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<string>? Groups = null,
    /// <value>The user's [IETF language tag](https://datatracker.ietf.org/doc/html/rfc5646).</value>
    [property:
        JsonPropertyName("locale"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Locale = null,
    /// <value>Information about the user's name.</value>
    [property:
        JsonPropertyName("name"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        CreateScimUserRequest.CreateScimUserName1? Name = null
)
{
    /// <summary>Information about the user's name.</summary>
    public record CreateScimUserName1(
        /// <value>The user's first name.</value>
        [property:
            JsonPropertyName("givenName"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? GivenName = null,
        /// <value>The user's last name.</value>
        [property:
            JsonPropertyName("familyName"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? FamilyName = null
    );
}
