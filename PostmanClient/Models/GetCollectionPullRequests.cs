// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record GetCollectionPullRequests(
    [property:
        JsonPropertyName("data"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetCollectionPullRequests.GetCollectionPullRequestsData>? Data = null
)
{
    /// <summary>Information about the pull request.</summary>
    public record GetCollectionPullRequestsData(
        /// <value>The date and time at which the pull request was created.</value>
        [property:
            JsonPropertyName("createdAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedAt = null,
        /// <value>The ID of the user who created the pull request.</value>
        [property:
            JsonPropertyName("createdBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedBy = null,
        /// <value>The pull request's description.</value>
        [property:
            JsonPropertyName("description"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Description = null,
        /// <value>The pull request's merge destination ID.</value>
        [property:
            JsonPropertyName("destinationId"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? DestinationId = null,
        /// <value>A URL where you can view the pull request's details.</value>
        [property:
            JsonPropertyName("href"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Href = null,
        /// <value>The pull request's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The pull request's source (parent) ID.</value>
        [property:
            JsonPropertyName("sourceId"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? SourceId = null,
        /// <value>The pull request's current status.</value>
        [property:
            JsonPropertyName("status"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetCollectionPullRequestsData.DataStatus? Status = null,
        /// <value>If the pull request is declined, a comment about why the pull request was declined.</value>
        [property:
            JsonPropertyName("comment"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Comment = null,
        /// <value>The pull request's title.</value>
        [property:
            JsonPropertyName("title"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Title = null,
        /// <value>The ID of the user who updated the pull request.</value>
        [property:
            JsonPropertyName("updatedBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? UpdatedBy = null,
        /// <value>The date and time at which the pull request was updated.</value>
        [property:
            JsonPropertyName("updatedAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? UpdatedAt = null
    )
    {
        /// <summary>The pull request's current status.</summary>
        public record DataStatus : ValueEnum<string>
        {
            internal DataStatus(string value)
                : base(value) { }

            public DataStatus()
                : base("open") { }

            public static DataStatus Open = new("open");
            public static DataStatus Approved = new("approved");
            public static DataStatus Declined = new("declined");
            public static DataStatus Merged = new("merged");
        }
    }
}
