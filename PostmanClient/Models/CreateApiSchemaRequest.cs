// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

/// <summary>Information about the API schema.</summary>
public record CreateApiSchemaRequest(
    /// <value>The schema's type.</value>
    [property: JsonPropertyName("type")]
        CreateApiSchemaRequest.CreateApiSchemaType1 Type_,
    /// <value>The list of files that are part of the schema.</value>
    [property: JsonPropertyName("files")]
        List<CreateApiSchemaRequest.CreateApiSchemaFiles1> Files
)
{
    /// <summary>The schema's type.</summary>
    public record CreateApiSchemaType1 : ValueEnum<string>
    {
        internal CreateApiSchemaType1(string value)
            : base(value) { }

        public CreateApiSchemaType1()
            : base("proto:2") { }

        public static CreateApiSchemaType1 Proto2 = new("proto:2");
        public static CreateApiSchemaType1 Proto3 = new("proto:3");
        public static CreateApiSchemaType1 Graphql = new("graphql");
        public static CreateApiSchemaType1 Openapi3_1 = new("openapi:3_1");
        public static CreateApiSchemaType1 Openapi3 = new("openapi:3");
        public static CreateApiSchemaType1 Openapi2 = new("openapi:2");
        public static CreateApiSchemaType1 Openapi1 = new("openapi:1");
        public static CreateApiSchemaType1 Raml1 = new("raml:1");
        public static CreateApiSchemaType1 Raml0_8 = new("raml:0_8");
        public static CreateApiSchemaType1 Wsdl2 = new("wsdl:2");
        public static CreateApiSchemaType1 Wsdl1 = new("wsdl:1");
        public static CreateApiSchemaType1 Asyncapi2 = new("asyncapi:2");
    }

    public record CreateApiSchemaFiles1(
        /// <value>The schema's file path.</value>
        [property:
            JsonPropertyName("path"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Path = null,
        /// <value>Information about the schema's root file.</value>
        [property:
            JsonPropertyName("root"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            CreateApiSchemaFiles1.FilesRoot? Root = null,
        /// <value>The schema file's stringified contents.</value>
        [property:
            JsonPropertyName("content"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Content = null
    )
    {
        /// <summary>Information about the schema's root file.</summary>
        public record FilesRoot(
            /// <value>If true, tag the file as the root file. The root tag is only allowed for protobuf specifications.</value>
            [property:
                JsonPropertyName("enabled"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                FilesRoot.Enabled? Enabled_ = null
        )
        {
            /// <summary>If true, tag the file as the root file. The root tag is only allowed for protobuf specifications.</summary>
            public record Enabled : ValueEnum<bool>
            {
                internal Enabled(bool value)
                    : base(value) { }

                public Enabled()
                    : base(true) { }

                public static Enabled True_ = new(true);
            }
        }
    }
}
