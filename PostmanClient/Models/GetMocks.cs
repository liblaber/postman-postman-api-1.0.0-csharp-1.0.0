// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record GetMocks(
    [property:
        JsonPropertyName("mocks"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetMocks.GetMocksMocks>? Mocks = null
)
{
    /// <summary>Information about the mock servers.</summary>
    public record GetMocksMocks(
        /// <value>The mock server's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The ID of mock server's owner.</value>
        [property:
            JsonPropertyName("owner"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Owner = null,
        /// <value>The mock server's unique ID.</value>
        [property:
            JsonPropertyName("uid"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Uid = null,
        /// <value>The unique ID of the mock's associated collection.</value>
        [property:
            JsonPropertyName("collection"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Collection = null,
        /// <value>The mock server URL.</value>
        [property:
            JsonPropertyName("mockUrl"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? MockUrl = null,
        /// <value>Information about the mock server's configuration.</value>
        [property:
            JsonPropertyName("config"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetMocksMocks.MocksConfig? Config = null,
        /// <value>The date and time at which the mock server was created.</value>
        [property:
            JsonPropertyName("createdAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedAt = null,
        /// <value>The mock server's associated environment ID.</value>
        [property:
            JsonPropertyName("environment"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Environment_ = null,
        /// <value>If true, the mock server is public and visible to all users. This field does not indicate the mock server's access control status.</value>
        [property:
            JsonPropertyName("isPublic"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? IsPublic = null,
        /// <value>The mock server's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>The date and time at which the mock server was last updated.</value>
        [property:
            JsonPropertyName("updatedAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? UpdatedAt = null
    )
    {
        /// <summary>Information about the mock server's configuration.</summary>
        public record MocksConfig(
            /// <value>Information about the mock server's simulated network delay settings. This returns a null value if there are no configured network delay settings.</value>
            [property: JsonPropertyName("delay")]
                MocksConfig.Delay? Delay_ = null,
            /// <value>A list of the mock server's headers.</value>
            [property:
                JsonPropertyName("headers"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                List<string>? Headers = null,
            /// <value>If true, match the request body.</value>
            [property:
                JsonPropertyName("matchBody"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? MatchBody = null,
            /// <value>If true, match query parameters.</value>
            [property:
                JsonPropertyName("matchQueryParams"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? MatchQueryParams = null,
            /// <value>If true, use wildcard variable matching.</value>
            [property:
                JsonPropertyName("matchWildcards"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? MatchWildcards = null,
            /// <value>The ID of mock server's default response for requests. All calls to the mock server will return the defined response.</value>
            [property:
                JsonPropertyName("serverResponseId"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? ServerResponseId = null
        )
        {
            /// <summary>Information about the mock server's simulated network delay settings. This returns a null value if there are no configured network delay settings.</summary>
            public record Delay(
                /// <value>
                /// The type of simulated delay value:
                /// - `fixed` — The delay value is a fixed value.
                /// </value>
                [property:
                    JsonPropertyName("type"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    Delay.DelayType? Type_ = null,
                /// <value>
                /// The simulated fixed network delay value:
                /// - `1` — 2G (300 ms).
                /// - `2` — 3G (100 ms).
                /// The object does not return this value for custom delay values.
                /// </value>
                [property:
                    JsonPropertyName("preset"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    Delay.Preset? Preset_ = null,
                /// <value>The configured delay, in milliseconds.</value>
                [property:
                    JsonPropertyName("duration"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    long? Duration = null
            )
            {
                /// <summary>
                /// The type of simulated delay value:
                /// - `fixed` — The delay value is a fixed value.
                /// </summary>
                public record DelayType : ValueEnum<string>
                {
                    internal DelayType(string value)
                        : base(value) { }

                    public DelayType()
                        : base("fixed") { }

                    public static DelayType Fixed_ = new("fixed");
                }

                /// <summary>
                /// The simulated fixed network delay value:
                /// - `1` — 2G (300 ms).
                /// - `2` — 3G (100 ms).
                /// The object does not return this value for custom delay values.
                /// </summary>
                public record Preset : ValueEnum<string>
                {
                    internal Preset(string value)
                        : base(value) { }

                    public Preset()
                        : base("1") { }

                    public static Preset _1 = new("1");
                    public static Preset _2 = new("2");
                }
            }
        }
    }
}
