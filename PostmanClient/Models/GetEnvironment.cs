// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record GetEnvironment(
    [property:
        JsonPropertyName("environment"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetEnvironment.GetEnvironmentEnvironment? Environment_ = null
)
{
    public record GetEnvironmentEnvironment(
        /// <value>The environment's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The environment's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>The ID of environment's owner.</value>
        [property:
            JsonPropertyName("owner"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Owner = null,
        /// <value>The date and time at which the environment was created.</value>
        [property:
            JsonPropertyName("createdAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedAt = null,
        /// <value>The date and time at which the environment was last updated.</value>
        [property:
            JsonPropertyName("updatedAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? UpdatedAt = null,
        /// <value>Information about the environment's variables.</value>
        [property:
            JsonPropertyName("values"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<GetEnvironmentEnvironment.EnvironmentValues2>? Values = null,
        /// <value>If true, the environment is public and visible to all users.</value>
        [property:
            JsonPropertyName("isPublic"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? IsPublic = null
    )
    {
        public record EnvironmentValues2(
            /// <value>If true, the variable is enabled.</value>
            [property:
                JsonPropertyName("enabled"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? Enabled = null,
            /// <value>The variable's name.</value>
            [property:
                JsonPropertyName("key"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Key = null,
            /// <value>The variable's value.</value>
            [property:
                JsonPropertyName("value"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Value = null,
            /// <value>The variable type.</value>
            [property:
                JsonPropertyName("type"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                EnvironmentValues2.ValuesType2? Type_ = null
        )
        {
            /// <summary>The variable type.</summary>
            public record ValuesType2 : ValueEnum<string>
            {
                internal ValuesType2(string value)
                    : base(value) { }

                public ValuesType2()
                    : base("secret") { }

                public static ValuesType2 Secret = new("secret");
                public static ValuesType2 Default_ = new("default");
                public static ValuesType2 Any = new("any");
            }
        }
    }
}
