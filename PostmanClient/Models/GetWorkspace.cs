// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record GetWorkspace(
    /// <value>Information about the workspace.</value>
    [property:
        JsonPropertyName("workspace"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetWorkspace.GetWorkspaceWorkspace? Workspace = null
)
{
    /// <summary>Information about the workspace.</summary>
    public record GetWorkspaceWorkspace(
        /// <value>The workspace's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The workspace's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>The type of workspace.</value>
        [property:
            JsonPropertyName("type"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetWorkspaceWorkspace.WorkspaceType2? Type_ = null,
        /// <value>The workspace's description.</value>
        [property:
            JsonPropertyName("description"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Description = null,
        /// <value>
        /// The workspace's visibility. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:
        /// - `personal` — Only you can access the workspace.
        /// - `team` — All team members can access the workspace.
        /// - `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
        /// - `public` — Everyone can access the workspace.
        /// - `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
        /// </value>
        [property:
            JsonPropertyName("visibility"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetWorkspaceWorkspace.WorkspaceVisibility? Visibility = null,
        /// <value>The user ID of the user who created the workspace.</value>
        [property:
            JsonPropertyName("createdBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedBy = null,
        /// <value>The user ID of the user who last updated the workspace.</value>
        [property:
            JsonPropertyName("updatedBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? UpdatedBy = null,
        /// <value>The date and time at which the workspace was created.</value>
        [property:
            JsonPropertyName("createdAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedAt = null,
        /// <value>The date and time at which the workspace was last updated.</value>
        [property:
            JsonPropertyName("updatedAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? UpdatedAt = null,
        /// <value>The workspace's collections.</value>
        [property:
            JsonPropertyName("collections"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<GetWorkspaceWorkspace.WorkspaceCollections>? Collections = null,
        /// <value>The workspace's environments.</value>
        [property:
            JsonPropertyName("environments"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<GetWorkspaceWorkspace.WorkspaceEnvironments>? Environments = null,
        /// <value>The workspace's mock servers.</value>
        [property:
            JsonPropertyName("mocks"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<GetWorkspaceWorkspace.WorkspaceMocks>? Mocks = null,
        /// <value>The workspace's monitors.</value>
        [property:
            JsonPropertyName("monitors"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<GetWorkspaceWorkspace.WorkspaceMonitors>? Monitors = null,
        /// <value>The workspace's APIs.</value>
        [property:
            JsonPropertyName("apis"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<GetWorkspaceWorkspace.WorkspaceApis>? Apis = null
    )
    {
        /// <summary>The type of workspace.</summary>
        public record WorkspaceType2 : ValueEnum<string>
        {
            internal WorkspaceType2(string value)
                : base(value) { }

            public WorkspaceType2()
                : base("personal") { }

            public static WorkspaceType2 Personal = new("personal");
            public static WorkspaceType2 Team = new("team");
            public static WorkspaceType2 Private_ = new("private");
            public static WorkspaceType2 Public_ = new("public");
            public static WorkspaceType2 Partner = new("partner");
        }

        /// <summary>
        /// The workspace's visibility. [Visibility](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility) determines who can access the workspace:
        /// - `personal` — Only you can access the workspace.
        /// - `team` — All team members can access the workspace.
        /// - `private` — Only invited team members can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
        /// - `public` — Everyone can access the workspace.
        /// - `partner` — Only invited team members and [partners](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/partner-workspaces/) can access the workspace ([**Professional** and **Enterprise** plans only](https://www.postman.com/pricing)).
        /// </summary>
        public record WorkspaceVisibility : ValueEnum<string>
        {
            internal WorkspaceVisibility(string value)
                : base(value) { }

            public WorkspaceVisibility()
                : base("personal") { }

            public static WorkspaceVisibility Personal = new("personal");
            public static WorkspaceVisibility Team = new("team");
            public static WorkspaceVisibility Private_ = new("private");
            public static WorkspaceVisibility Public_ = new("public");
            public static WorkspaceVisibility Partner = new("partner");
        }

        /// <summary>Information about the collection.</summary>
        public record WorkspaceCollections(
            /// <value>The collection's ID.</value>
            [property:
                JsonPropertyName("id"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Id = null,
            /// <value>The collection's name.</value>
            [property:
                JsonPropertyName("name"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Name = null,
            /// <value>The collection's unique ID.</value>
            [property:
                JsonPropertyName("uid"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Uid = null
        );

        /// <summary>Information about the environment.</summary>
        public record WorkspaceEnvironments(
            /// <value>The environment's ID.</value>
            [property:
                JsonPropertyName("id"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Id = null,
            /// <value>The environment's name.</value>
            [property:
                JsonPropertyName("name"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Name = null,
            /// <value>The environment's unique ID.</value>
            [property:
                JsonPropertyName("uid"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Uid = null
        );

        /// <summary>Information about the mock server.</summary>
        public record WorkspaceMocks(
            /// <value>The mock server's ID.</value>
            [property:
                JsonPropertyName("id"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Id = null,
            /// <value>The mock server's name.</value>
            [property:
                JsonPropertyName("name"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Name = null,
            /// <value>The mock server's unique ID.</value>
            [property:
                JsonPropertyName("uid"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Uid = null,
            /// <value>If true, the mock server is not active. Mock servers deactivate when a linked collection or environment is deleted.</value>
            [property:
                JsonPropertyName("deactivated"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? Deactivated = null
        );

        /// <summary>Information about the monitor.</summary>
        public record WorkspaceMonitors(
            /// <value>The monitor's ID.</value>
            [property:
                JsonPropertyName("id"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Id = null,
            /// <value>The monitor's name.</value>
            [property:
                JsonPropertyName("name"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Name = null,
            /// <value>The monitor's unique ID.</value>
            [property:
                JsonPropertyName("uid"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Uid = null
        );

        /// <summary>Information about the API.</summary>
        public record WorkspaceApis(
            /// <value>The API's ID.</value>
            [property:
                JsonPropertyName("id"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Id = null,
            /// <value>The API's name.</value>
            [property:
                JsonPropertyName("name"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Name = null,
            /// <value>The API's unique ID.</value>
            [property:
                JsonPropertyName("uid"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Uid = null
        );
    }
}
