// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record CreateMockServerResponse(
    [property:
        JsonPropertyName("serverResponse"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        CreateMockServerResponse.CreateMockServerResponseServerResponse? ServerResponse = null
)
{
    public record CreateMockServerResponseServerResponse(
        /// <value>The server response's name.</value>
        [property: JsonPropertyName("name")]
            string Name,
        /// <value>The server response's 5xx HTTP response code. This property only accepts 5xx values.</value>
        [property: JsonPropertyName("statusCode")]
            long StatusCode,
        /// <value>The server response's request headers, such as Content-Type, Accept, encoding, and other information.</value>
        [property:
            JsonPropertyName("headers"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<CreateMockServerResponseServerResponse.ServerResponseHeaders1>? Headers = null,
        /// <value>The server response's body language type.</value>
        [property: JsonPropertyName("language")]
            CreateMockServerResponseServerResponse.ServerResponseLanguage1? Language = null,
        /// <value>The server response's body that returns when calling the mock server.</value>
        [property:
            JsonPropertyName("body"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Body = null
    )
    {
        public record ServerResponseHeaders1(
            /// <value>The request header's key value.</value>
            [property:
                JsonPropertyName("key"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Key = null,
            /// <value>The request header's value.</value>
            [property:
                JsonPropertyName("value"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Value = null
        );

        /// <summary>The server response's body language type.</summary>
        public record ServerResponseLanguage1 : ValueEnum<string>
        {
            internal ServerResponseLanguage1(string value)
                : base(value) { }

            public ServerResponseLanguage1()
                : base("text") { }

            public static ServerResponseLanguage1 Text = new("text");
            public static ServerResponseLanguage1 Javascript = new("javascript");
            public static ServerResponseLanguage1 Json = new("json");
            public static ServerResponseLanguage1 Html = new("html");
            public static ServerResponseLanguage1 Xml = new("xml");
        }
    }
}
