// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record UpdateDetectedSecretResolutionsOkResponse(
    /// <value>The history of the secret's resolution status changes.</value>
    [property:
        JsonPropertyName("history"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<UpdateDetectedSecretResolutionsOkResponse.History>? History_ = null,
    /// <value>
    /// The secret's current resolution status:
    /// - `ACTIVE` — The secret is active.
    /// - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
    /// - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
    /// - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
    /// </value>
    [property:
        JsonPropertyName("resolution"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        UpdateDetectedSecretResolutionsOkResponse.UpdateSecretResolutionsResolution2? Resolution =
        null,
    /// <value>The SHA-256 hash of the detected secret.</value>
    [property:
        JsonPropertyName("secretHash"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? SecretHash = null,
    /// <value>The ID of the workspace that contains the secret.</value>
    [property:
        JsonPropertyName("workspaceId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? WorkspaceId = null
)
{
    public record History(
        /// <value>The ID of the user that updated the secret's resolution status.</value>
        [property:
            JsonPropertyName("actor"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Actor = null,
        /// <value>The date and time at which the resolution status was updated.</value>
        [property:
            JsonPropertyName("createdAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedAt = null,
        /// <value>
        /// The secret's updated resolution status:
        /// - `ACTIVE` — The secret is active.
        /// - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
        /// - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
        /// - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
        /// </value>
        [property:
            JsonPropertyName("resolution"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            History.HistoryResolution? Resolution = null
    )
    {
        /// <summary>
        /// The secret's updated resolution status:
        /// - `ACTIVE` — The secret is active.
        /// - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
        /// - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
        /// - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
        /// </summary>
        public record HistoryResolution : ValueEnum<string>
        {
            internal HistoryResolution(string value)
                : base(value) { }

            public HistoryResolution()
                : base("FALSE_POSITIVE") { }

            public static HistoryResolution FalsePositive = new("FALSE_POSITIVE");
            public static HistoryResolution AcceptedRisk = new("ACCEPTED_RISK");
            public static HistoryResolution Revoked = new("REVOKED");
            public static HistoryResolution Active = new("ACTIVE");
        }
    }

    /// <summary>
    /// The secret's current resolution status:
    /// - `ACTIVE` — The secret is active.
    /// - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
    /// - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
    /// - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
    /// </summary>
    public record UpdateSecretResolutionsResolution2 : ValueEnum<string>
    {
        internal UpdateSecretResolutionsResolution2(string value)
            : base(value) { }

        public UpdateSecretResolutionsResolution2()
            : base("FALSE_POSITIVE") { }

        public static UpdateSecretResolutionsResolution2 FalsePositive = new("FALSE_POSITIVE");
        public static UpdateSecretResolutionsResolution2 AcceptedRisk = new("ACCEPTED_RISK");
        public static UpdateSecretResolutionsResolution2 Revoked = new("REVOKED");
        public static UpdateSecretResolutionsResolution2 Active = new("ACTIVE");
    }
}
