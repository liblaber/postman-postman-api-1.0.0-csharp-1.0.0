// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record GetPanElementsAndFolders(
    /// <value>Information about a Private API Network's folder elements. Elements are APIs, collections, and workspaces.</value>
    [property:
        JsonPropertyName("elements"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetPanElementsAndFolders.Elements>? Elements_ = null,
    /// <value>Information about the Private API Network's folders.</value>
    [property:
        JsonPropertyName("folders"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetPanElementsAndFolders.Folders>? Folders_ = null,
    /// <value>The response's non-standard meta information.</value>
    [property:
        JsonPropertyName("meta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetPanElementsAndFolders.GetPanElementsAndFoldersMeta? Meta = null
)
{
    public record Elements(
        /// <value>The date and time at which the element was created.</value>
        [property:
            JsonPropertyName("createdAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedAt = null,
        /// <value>The user who created the element.</value>
        [property:
            JsonPropertyName("createdBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? CreatedBy = null,
        /// <value>The date and time at which the element was last updated.</value>
        [property:
            JsonPropertyName("updatedAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? UpdatedAt = null,
        /// <value>The user who updated the element.</value>
        [property:
            JsonPropertyName("updatedBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? UpdatedBy = null,
        /// <value>The date and time at which the element was published to Private API Network. This value is the same as the `updatedAt` value.</value>
        [property:
            JsonPropertyName("addedAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? AddedAt = null,
        /// <value>The user ID of the user who published the element.</value>
        [property:
            JsonPropertyName("addedBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? AddedBy = null,
        /// <value>The element's description.</value>
        [property:
            JsonPropertyName("description"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Description = null,
        /// <value>The element's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The element's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>The element's summary.</value>
        [property:
            JsonPropertyName("summary"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Summary = null,
        /// <value>The element's type.</value>
        [property:
            JsonPropertyName("type"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Type_ = null,
        /// <value>The element's parent folder ID.</value>
        [property:
            JsonPropertyName("parentFolderId"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? ParentFolderId = null,
        /// <value>The element's HREF.</value>
        [property:
            JsonPropertyName("href"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Href = null
    );

    public record Folders(
        /// <value>The folder's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Id = null,
        /// <value>The folder's parent folder ID.</value>
        [property:
            JsonPropertyName("parentFolderId"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? ParentFolderId = null,
        /// <value>The date and time at which the folder was updated.</value>
        [property:
            JsonPropertyName("updatedAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? UpdatedAt = null,
        /// <value>The user ID of the user who updated the folder.</value>
        [property:
            JsonPropertyName("updatedBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? UpdatedBy = null,
        /// <value>The date and time at which the folder was created.</value>
        [property:
            JsonPropertyName("createdAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedAt = null,
        /// <value>The user who created the folder.</value>
        [property:
            JsonPropertyName("createdBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? CreatedBy = null,
        /// <value>The folder's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>The folder's description.</value>
        [property:
            JsonPropertyName("description"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Description = null,
        /// <value>The element's type. This value is always `folder`.</value>
        [property:
            JsonPropertyName("type"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Type_ = null
    );

    /// <summary>The response's non-standard meta information.</summary>
    public record GetPanElementsAndFoldersMeta(
        /// <value>The maximum number of elements returned. If the value exceeds the maximum value of `1000`, then the system uses the `1000` value.</value>
        [property:
            JsonPropertyName("limit"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Limit = null,
        /// <value>The zero-based offset of the first item returned.</value>
        [property:
            JsonPropertyName("offset"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Offset = null,
        /// <value>The total count of the `elements` and `folders` items.</value>
        [property:
            JsonPropertyName("totalCount"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? TotalCount = null
    );
}
