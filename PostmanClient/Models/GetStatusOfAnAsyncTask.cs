// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;
using PostmanClient.OneOf;

namespace PostmanClient.Models;

public record GetStatusOfAnAsyncTask(
    /// <value>The task's ID.</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>The response's non-standard meta information.</value>
    [property:
        JsonPropertyName("meta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetStatusOfAnAsyncTask.GetStatusOfAnAsyncTaskMeta? Meta = null,
    /// <value>The task's current status.</value>
    [property:
        JsonPropertyName("status"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetStatusOfAnAsyncTask.GetStatusOfAnAsyncTaskStatus? Status = null,
    [property:
        JsonPropertyName("details"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        OneOf<Details1, Details2>? Details = null,
    /// <value>The date and time at which the task was created.</value>
    [property:
        JsonPropertyName("createdAt"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? CreatedAt = null,
    /// <value>The date and time at which the task was last updated.</value>
    [property:
        JsonPropertyName("updatedAt"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? UpdatedAt = null
)
{
    /// <summary>The response's non-standard meta information.</summary>
    public record GetStatusOfAnAsyncTaskMeta(
        /// <value>The endpoint URL that created the task.</value>
        [property:
            JsonPropertyName("url"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Url = null,
        /// <value>The model for which the task is performing the operation.</value>
        [property:
            JsonPropertyName("model"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetStatusOfAnAsyncTaskMeta.MetaModel? Model = null,
        /// <value>The task's action.</value>
        [property:
            JsonPropertyName("action"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetStatusOfAnAsyncTaskMeta.Action? Action_ = null
    )
    {
        /// <summary>The model for which the task is performing the operation.</summary>
        public record MetaModel : ValueEnum<string>
        {
            internal MetaModel(string value)
                : base(value) { }

            public MetaModel()
                : base("collection") { }

            public static MetaModel Collection = new("collection");
            public static MetaModel ApiVersion = new("api-version");
        }

        /// <summary>The task's action.</summary>
        public record Action : ValueEnum<string>
        {
            internal Action(string value)
                : base(value) { }

            public Action()
                : base("update") { }

            public static Action Update = new("update");
            public static Action Create = new("create");
        }
    }

    /// <summary>The task's current status.</summary>
    public record GetStatusOfAnAsyncTaskStatus : ValueEnum<string>
    {
        internal GetStatusOfAnAsyncTaskStatus(string value)
            : base(value) { }

        public GetStatusOfAnAsyncTaskStatus()
            : base("pending") { }

        public static GetStatusOfAnAsyncTaskStatus Pending = new("pending");
        public static GetStatusOfAnAsyncTaskStatus Failed = new("failed");
        public static GetStatusOfAnAsyncTaskStatus Completed = new("completed");
    }
}
