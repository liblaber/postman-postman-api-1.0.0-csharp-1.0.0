// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record DetectedSecretsQueriesOkResponse(
    [property:
        JsonPropertyName("data"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<DetectedSecretsQueriesOkResponse.DetectedSecretsQueriesData>? Data = null,
    /// <value>The response's meta information for paginated results.</value>
    [property:
        JsonPropertyName("meta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        DetectedSecretsQueriesOkResponse.DetectedSecretsQueriesMeta? Meta = null
)
{
    /// <summary>Information about the secret finding.</summary>
    public record DetectedSecretsQueriesData(
        /// <value>The secret's obfuscated value.</value>
        [property:
            JsonPropertyName("obfuscatedSecret"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? ObfuscatedSecret = null,
        /// <value>The number of times the secret was found in the workspace.</value>
        [property:
            JsonPropertyName("occurrences"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Occurrences = null,
        /// <value>
        /// The secret's current status:
        /// - `ACTIVE` — The secret is active.
        /// - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
        /// - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
        /// - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
        /// </value>
        [property:
            JsonPropertyName("resolution"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            DetectedSecretsQueriesData.DataResolution? Resolution = null,
        /// <value>The SHA-256 hash of the detected secret.</value>
        [property:
            JsonPropertyName("secretHash"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? SecretHash = null,
        /// <value>The detected secret's ID.</value>
        [property:
            JsonPropertyName("secretId"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? SecretId = null,
        /// <value>The type of the secret.</value>
        [property:
            JsonPropertyName("secretType"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? SecretType = null,
        /// <value>The date and time at which the secret was first detected.</value>
        [property:
            JsonPropertyName("detectedAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? DetectedAt = null,
        /// <value>The ID of the workspace that contains the secret.</value>
        [property:
            JsonPropertyName("workspaceId"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? WorkspaceId = null,
        /// <value>The workspace's [visibility setting](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility).</value>
        [property:
            JsonPropertyName("workspaceVisibility"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            DetectedSecretsQueriesData.DataWorkspaceVisibility? WorkspaceVisibility = null
    )
    {
        /// <summary>
        /// The secret's current status:
        /// - `ACTIVE` — The secret is active.
        /// - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
        /// - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
        /// - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
        /// </summary>
        public record DataResolution : ValueEnum<string>
        {
            internal DataResolution(string value)
                : base(value) { }

            public DataResolution()
                : base("FALSE_POSITIVE") { }

            public static DataResolution FalsePositive = new("FALSE_POSITIVE");
            public static DataResolution AcceptedRisk = new("ACCEPTED_RISK");
            public static DataResolution Revoked = new("REVOKED");
            public static DataResolution Active = new("ACTIVE");
        }

        /// <summary>The workspace's [visibility setting](https://learning.postman.com/docs/collaborating-in-postman/using-workspaces/managing-workspaces/#changing-workspace-visibility).</summary>
        public record DataWorkspaceVisibility : ValueEnum<string>
        {
            internal DataWorkspaceVisibility(string value)
                : base(value) { }

            public DataWorkspaceVisibility()
                : base("personal") { }

            public static DataWorkspaceVisibility Personal = new("personal");
            public static DataWorkspaceVisibility Private_ = new("private");
            public static DataWorkspaceVisibility Team = new("team");
            public static DataWorkspaceVisibility Public_ = new("public");
        }
    }

    /// <summary>The response's meta information for paginated results.</summary>
    public record DetectedSecretsQueriesMeta(
        /// <value>The maximum number of records in the paginated response.</value>
        [property:
            JsonPropertyName("limit"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Limit = null,
        /// <value>The pagination cursor that points to the next record in the results set.</value>
        [property: JsonPropertyName("nextCursor")]
            string? NextCursor = null,
        /// <value>The number of records that match the defined criteria. This will only be present if the `include` query parameter is specified with the `meta.total` value.</value>
        [property:
            JsonPropertyName("total"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Total = null
    );
}
