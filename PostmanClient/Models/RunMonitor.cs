// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record RunMonitor(
    /// <value>Information about the monitor run.</value>
    [property:
        JsonPropertyName("run"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        RunMonitor.Run? Run_ = null
)
{
    /// <summary>Information about the monitor run.</summary>
    public record Run(
        /// <value>Information about the monitor.</value>
        [property:
            JsonPropertyName("info"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Run.RunInfo? Info = null,
        /// <value>Information about the monitor run's stats.</value>
        [property:
            JsonPropertyName("stats"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Run.RunStats? Stats = null,
        /// <value>Information about the monitor run's executions.</value>
        [property:
            JsonPropertyName("executions"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<Run.Executions>? Executions_ = null,
        /// <value>If the monitor run failed, information about the run's failures.</value>
        [property:
            JsonPropertyName("failures"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<object>? Failures = null
    )
    {
        /// <summary>Information about the monitor.</summary>
        public record RunInfo(
            /// <value>The monitor's run job ID.</value>
            [property:
                JsonPropertyName("jobId"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? JobId = null,
            /// <value>The unique ID of the monitor's associated collection.</value>
            [property:
                JsonPropertyName("collectionUid"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? CollectionUid = null,
            /// <value>The unique ID of the monitor's associated environment.</value>
            [property:
                JsonPropertyName("environmentUid"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? EnvironmentUid = null,
            /// <value>The monitor's ID.</value>
            [property:
                JsonPropertyName("monitorId"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? MonitorId = null,
            /// <value>The monitor's name.</value>
            [property:
                JsonPropertyName("name"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Name = null,
            /// <value>The monitor run's status.</value>
            [property:
                JsonPropertyName("status"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Status = null,
            /// <value>The date and time at which the monitor run began.</value>
            [property:
                JsonPropertyName("startedAt"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? StartedAt = null,
            /// <value>The date and time at which the monitor's run completed.</value>
            [property:
                JsonPropertyName("finishedAt"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? FinishedAt = null
        );

        /// <summary>Information about the monitor run's stats.</summary>
        public record RunStats(
            /// <value>The monitor run's assertions stats.</value>
            [property:
                JsonPropertyName("assertions"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                RunStats.StatsAssertions2? Assertions = null,
            /// <value>The monitor run's request stats.</value>
            [property:
                JsonPropertyName("requests"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                RunStats.StatsRequests2? Requests = null
        )
        {
            /// <summary>The monitor run's assertions stats.</summary>
            public record StatsAssertions2(
                /// <value>The total number of tests performed.</value>
                [property:
                    JsonPropertyName("total"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    double? Total = null,
                /// <value>The total number of test failures.</value>
                [property:
                    JsonPropertyName("failed"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    double? Failed = null
            );

            /// <summary>The monitor run's request stats.</summary>
            public record StatsRequests2(
                /// <value>The total number of requests.</value>
                [property:
                    JsonPropertyName("total"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    double? Total = null,
                /// <value>The number of request failures.</value>
                [property:
                    JsonPropertyName("failed"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    double? Failed = null
            );
        }

        public record Executions(
            /// <value>The execution ID.</value>
            [property:
                JsonPropertyName("id"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                double? Id = null,
            /// <value>Information about the executed item.</value>
            [property:
                JsonPropertyName("item"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                Executions.ExecutionsItem? Item = null,
            /// <value>Information about the monitor run's requests.</value>
            [property:
                JsonPropertyName("request"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                Executions.ExecutionsRequest? Request_ = null,
            /// <value>Information about the monitor run's response.</value>
            [property:
                JsonPropertyName("response"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                Executions.ExecutionsResponse? Response_ = null
        )
        {
            /// <summary>Information about the executed item.</summary>
            public record ExecutionsItem(
                /// <value>The executed item's name.</value>
                [property:
                    JsonPropertyName("name"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Name = null
            );

            /// <summary>Information about the monitor run's requests.</summary>
            public record ExecutionsRequest(
                /// <value>The request method.</value>
                [property:
                    JsonPropertyName("method"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Method = null,
                /// <value>The request's URL.</value>
                [property:
                    JsonPropertyName("url"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Url = null,
                /// <value>Information about the request body, such as Content-Length.</value>
                [property:
                    JsonPropertyName("body"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    object? Body = null,
                /// <value>Information about the request headers, such as Content-Type, Accept, encoding, and other information.</value>
                [property:
                    JsonPropertyName("headers"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    object? Headers = null,
                /// <value>The date and time of the request.</value>
                [property:
                    JsonPropertyName("timestamp"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Timestamp = null
            );

            /// <summary>Information about the monitor run's response.</summary>
            public record ExecutionsResponse(
                /// <value>Information about the request body, such as Content-Length.</value>
                [property:
                    JsonPropertyName("body"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    object? Body = null,
                /// <value>The response's HTTP status code.</value>
                [property:
                    JsonPropertyName("code"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    double? Code = null,
                /// <value>Information about the response headers, such as Content-Type, Accept, encoding, and other information.</value>
                [property:
                    JsonPropertyName("headers"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    object? Headers = null,
                /// <value>The response size, in bytes.</value>
                [property:
                    JsonPropertyName("responseSize"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    double? ResponseSize = null,
                /// <value>The response time, in milliseconds.</value>
                [property:
                    JsonPropertyName("responseTime"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    double? ResponseTime = null
            );
        }
    }
}
