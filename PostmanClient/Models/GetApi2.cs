// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record GetApi2(
    /// <value>The API's ID.</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>The API's name.</value>
    [property:
        JsonPropertyName("name"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Name = null,
    /// <value>The API's short summary.</value>
    [property:
        JsonPropertyName("summary"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Summary = null,
    /// <value>The date and time at which the API was created.</value>
    [property:
        JsonPropertyName("createdAt"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? CreatedAt = null,
    /// <value>The Postman ID of the user that created the API.</value>
    [property:
        JsonPropertyName("createdBy"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? CreatedBy = null,
    /// <value>The date and time at which the API was updated.</value>
    [property:
        JsonPropertyName("updatedAt"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? UpdatedAt = null,
    /// <value>The Postman ID of the user that updated the API.</value>
    [property:
        JsonPropertyName("updatedBy"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        long? UpdatedBy = null,
    /// <value>The API's description.</value>
    [property:
        JsonPropertyName("description"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Description = null,
    /// <value>Information about the API's Git repository integration.</value>
    [property:
        JsonPropertyName("gitInfo"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetApi2.GitInfo? GitInfo_ = null,
    /// <value>The API's schemas.</value>
    [property:
        JsonPropertyName("schemas"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetApi2.GetApi2Schemas>? Schemas = null,
    /// <value>The API's versions.</value>
    [property:
        JsonPropertyName("versions"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetApi2.GetApi2Versions>? Versions = null,
    /// <value>The API's collections.</value>
    [property:
        JsonPropertyName("collections"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetApi2.GetApi2Collections>? Collections = null
)
{
    /// <summary>Information about the API's Git repository integration.</summary>
    public record GitInfo(
        /// <value>The domain at which the Git repository is hosted.</value>
        [property: JsonPropertyName("domain")]
            string? Domain = null,
        /// <value>The repository's name.</value>
        [property:
            JsonPropertyName("repository"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Repository = null,
        /// <value>The organization that owns the repository.</value>
        [property:
            JsonPropertyName("organization"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Organization = null,
        /// <value>The API definition's repository folder location.</value>
        [property:
            JsonPropertyName("schemaFolder"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? SchemaFolder = null,
        /// <value>The API definition's collection repository folder location.</value>
        [property:
            JsonPropertyName("collectionFolder"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CollectionFolder = null
    );

    /// <summary>Information about the schema.</summary>
    public record GetApi2Schemas(
        /// <value>The schema's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null
    );

    /// <summary>Information about the version.</summary>
    public record GetApi2Versions(
        /// <value>The version's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The version's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null
    );

    /// <summary>Information about the collection.</summary>
    public record GetApi2Collections(
        /// <value>The collection's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null
    );
}
