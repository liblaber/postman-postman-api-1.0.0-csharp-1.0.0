// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

/// <summary>Information about the collection's roles.</summary>
public record GetCollectionRoles(
    /// <value>A list of the collection's group roles.</value>
    [property:
        JsonPropertyName("group"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetCollectionRoles.Group>? Group_ = null,
    /// <value>A list of the collection's team roles.</value>
    [property:
        JsonPropertyName("team"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetCollectionRoles.GetCollectionRolesTeam>? Team = null,
    /// <value>A list of the collection's user roles.</value>
    [property:
        JsonPropertyName("user"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetCollectionRoles.GetCollectionRolesUser>? User = null
)
{
    /// <summary>Information about the group role.</summary>
    public record Group(
        /// <value>
        /// The role type:
        /// - `VIEWER` — Can view, fork, and export collections.
        /// - `EDITOR` — Can edit collections directly.
        /// </value>
        [property:
            JsonPropertyName("role"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Group.GroupRole? Role = null,
        /// <value>The role's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Id = null
    )
    {
        /// <summary>
        /// The role type:
        /// - `VIEWER` — Can view, fork, and export collections.
        /// - `EDITOR` — Can edit collections directly.
        /// </summary>
        public record GroupRole : ValueEnum<string>
        {
            internal GroupRole(string value)
                : base(value) { }

            public GroupRole()
                : base("VIEWER") { }

            public static GroupRole Viewer = new("VIEWER");
            public static GroupRole Editor = new("EDITOR");
        }
    }

    /// <summary>Information about the team role.</summary>
    public record GetCollectionRolesTeam(
        /// <value>
        /// The role type:
        /// - `VIEWER` — Can view, fork, and export collections.
        /// - `EDITOR` — Can edit collections directly.
        /// </value>
        [property:
            JsonPropertyName("role"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetCollectionRolesTeam.TeamRole? Role = null,
        /// <value>The role's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Id = null
    )
    {
        /// <summary>
        /// The role type:
        /// - `VIEWER` — Can view, fork, and export collections.
        /// - `EDITOR` — Can edit collections directly.
        /// </summary>
        public record TeamRole : ValueEnum<string>
        {
            internal TeamRole(string value)
                : base(value) { }

            public TeamRole()
                : base("VIEWER") { }

            public static TeamRole Viewer = new("VIEWER");
            public static TeamRole Editor = new("EDITOR");
        }
    }

    /// <summary>Information about the user role.</summary>
    public record GetCollectionRolesUser(
        /// <value>
        /// The role type:
        /// - `VIEWER` — Can view, fork, and export collections.
        /// - `EDITOR` — Can edit collections directly.
        /// </value>
        [property:
            JsonPropertyName("role"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetCollectionRolesUser.UserRole? Role = null,
        /// <value>The role's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Id = null
    )
    {
        /// <summary>
        /// The role type:
        /// - `VIEWER` — Can view, fork, and export collections.
        /// - `EDITOR` — Can edit collections directly.
        /// </summary>
        public record UserRole : ValueEnum<string>
        {
            internal UserRole(string value)
                : base(value) { }

            public UserRole()
                : base("VIEWER") { }

            public static UserRole Viewer = new("VIEWER");
            public static UserRole Editor = new("EDITOR");
        }
    }
}
