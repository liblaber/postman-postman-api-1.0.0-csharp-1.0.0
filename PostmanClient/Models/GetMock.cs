// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record GetMock(
    [property:
        JsonPropertyName("mock"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetMock.GetMockMock? Mock = null
)
{
    public record GetMockMock(
        /// <value>The mock server's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The ID of mock server's owner.</value>
        [property:
            JsonPropertyName("owner"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Owner = null,
        /// <value>The mock server's unique ID.</value>
        [property:
            JsonPropertyName("uid"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Uid = null,
        /// <value>The unique ID of the mock's associated collection.</value>
        [property:
            JsonPropertyName("collection"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Collection = null,
        /// <value>The mock server URL.</value>
        [property:
            JsonPropertyName("mockUrl"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? MockUrl = null,
        /// <value>The mock server's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>Information about the mock server's configuration.</value>
        [property:
            JsonPropertyName("config"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetMockMock.MockConfig1? Config = null,
        /// <value>The date and time at which the mock server was created.</value>
        [property:
            JsonPropertyName("createdAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedAt = null,
        /// <value>The date and time at which the mock server was last updated.</value>
        [property:
            JsonPropertyName("updatedAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? UpdatedAt = null,
        /// <value>If true, the mock server is public and visible to all users. This field does not indicate the mock server's access control status.</value>
        [property:
            JsonPropertyName("isPublic"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? IsPublic = null,
        /// <value>If true, the mock server is not active. Mock servers deactivate when a linked collection or environment is deleted.</value>
        [property:
            JsonPropertyName("deactivated"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Deactivated = null,
        /// <value>The mock server's associated environment ID.</value>
        [property:
            JsonPropertyName("environment"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Environment_ = null
    )
    {
        /// <summary>Information about the mock server's configuration.</summary>
        public record MockConfig1(
            /// <value>A list of the mock server's headers.</value>
            [property:
                JsonPropertyName("headers"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                List<string>? Headers = null,
            /// <value>If true, match the request body.</value>
            [property:
                JsonPropertyName("matchBody"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? MatchBody = null,
            /// <value>If true, match query parameters.</value>
            [property:
                JsonPropertyName("matchQueryParams"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? MatchQueryParams = null,
            /// <value>If true, use wildcard variable matching.</value>
            [property:
                JsonPropertyName("matchWildcards"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                bool? MatchWildcards = null,
            /// <value>The ID of mock server's default response for requests. All calls to the mock server will return the defined response.</value>
            [property: JsonPropertyName("serverResponseId")]
                string? ServerResponseId = null
        );
    }
}
