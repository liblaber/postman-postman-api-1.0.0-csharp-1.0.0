// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record GetWorkspaceRoles(
    /// <value>Information about the workspace's [user roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).</value>
    [property:
        JsonPropertyName("roles"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetWorkspaceRoles.GetWorkspaceRolesRoles? Roles = null
)
{
    /// <summary>Information about the workspace's [user roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).</summary>
    public record GetWorkspaceRolesRoles(
        /// <value>The list of user roles in the workspace.</value>
        [property:
            JsonPropertyName("user"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<GetWorkspaceRolesRoles.RolesUser>? User = null,
        /// <value>Information about the workspace's [user group roles](https://learning.postman.com/docs/collaborating-in-postman/user-groups/).</value>
        [property:
            JsonPropertyName("usergroup"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<GetWorkspaceRolesRoles.Usergroup>? Usergroup_ = null
    )
    {
        /// <summary>Information about the user role.</summary>
        public record RolesUser(
            /// <value>The role's ID.</value>
            [property:
                JsonPropertyName("id"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                long? Id = null,
            /// <value>The role's description.</value>
            [property:
                JsonPropertyName("description"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Description = null,
            /// <value>The role's display name.</value>
            [property:
                JsonPropertyName("displayName"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? DisplayName = null
        );

        /// <summary>Information about the user group in the workspace.</summary>
        public record Usergroup(
            /// <value>The role's ID.</value>
            [property:
                JsonPropertyName("id"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                long? Id = null,
            /// <value>The role's description.</value>
            [property:
                JsonPropertyName("description"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Description = null,
            /// <value>The role's display name.</value>
            [property:
                JsonPropertyName("displayName"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? DisplayName = null
        );
    }
}
