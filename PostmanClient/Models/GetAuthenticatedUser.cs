// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record GetAuthenticatedUser(
    /// <value>Information about the authenticated user.</value>
    [property:
        JsonPropertyName("user"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetAuthenticatedUser.GetAuthenticatedUserUser? User = null,
    /// <value>Information about operations and their usage limits. This object does not return for users with the [Guest role](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).</value>
    [property:
        JsonPropertyName("operations"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetAuthenticatedUser.GetAuthenticatedUserOperations>? Operations = null
)
{
    /// <summary>Information about the authenticated user.</summary>
    public record GetAuthenticatedUserUser(
        /// <value>The user's Postman ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Id = null,
        /// <value>The user's username.</value>
        [property:
            JsonPropertyName("username"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Username = null,
        /// <value>The user's email address.</value>
        [property:
            JsonPropertyName("email"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Email = null,
        /// <value>The user's full name.</value>
        [property:
            JsonPropertyName("fullName"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? FullName = null,
        /// <value>The user's avatar image URL.</value>
        [property: JsonPropertyName("avatar")]
            string? Avatar = null,
        /// <value>If true, the user's information is public and visible to all users.</value>
        [property:
            JsonPropertyName("isPublic"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? IsPublic = null,
        /// <value>The team ID the user is assigned to. This returns a `0` value if the user is not assigned to a team.</value>
        [property:
            JsonPropertyName("teamId"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? TeamId = null,
        /// <value>The name of the team the user is assigned to.</value>
        [property:
            JsonPropertyName("teamName"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? TeamName = null,
        /// <value>The team's Postman domain ID.</value>
        [property:
            JsonPropertyName("teamDomain"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? TeamDomain = null,
        /// <value>A list of the user's assigned [roles](https://learning.postman.com/docs/collaborating-in-postman/roles-and-permissions/#team-roles).</value>
        [property:
            JsonPropertyName("roles"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<string>? Roles = null
    );

    public record GetAuthenticatedUserOperations(
        /// <value>The operation's limit value.</value>
        [property:
            JsonPropertyName("limit"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Limit = null,
        /// <value>The operation's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>The operation's overage value.</value>
        [property:
            JsonPropertyName("overage"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Overage = null,
        /// <value>The operation's current usage value.</value>
        [property:
            JsonPropertyName("usage"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Usage = null
    );
}
