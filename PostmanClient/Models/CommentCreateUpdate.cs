// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

/// <summary>Information about the comment.</summary>
public record CommentCreateUpdate(
    /// <value>The contents of the comment.</value>
    [property: JsonPropertyName("body")]
        string Body,
    /// <value>Information about users tagged in the `body` comment.</value>
    [property:
        JsonPropertyName("tags"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        CommentCreateUpdate.CommentCreateUpdateTags? Tags = null
)
{
    /// <summary>Information about users tagged in the `body` comment.</summary>
    public record CommentCreateUpdateTags(
        /// <value>An object that contains information about the tagged user. The object's name is the user's Postman username. For example, `@user-postman`.</value>
        [property:
            JsonPropertyName("userName"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            CommentCreateUpdateTags.UserName? UserName_ = null
    )
    {
        /// <summary>An object that contains information about the tagged user. The object's name is the user's Postman username. For example, `@user-postman`.</summary>
        public record UserName(
            /// <value>The `user` value.</value>
            [property: JsonPropertyName("type")]
                UserName.UserNameType Type_,
            /// <value>The user's ID.</value>
            [property: JsonPropertyName("id")]
                long Id
        )
        {
            /// <summary>The `user` value.</summary>
            public record UserNameType : ValueEnum<string>
            {
                internal UserNameType(string value)
                    : base(value) { }

                public UserNameType()
                    : base("user") { }

                public static UserNameType User = new("user");
            }
        }
    }
}
