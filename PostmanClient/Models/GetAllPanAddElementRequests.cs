// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record GetAllPanAddElementRequests(
    /// <value>Information about the requests to add elements to the Private API Network.</value>
    [property:
        JsonPropertyName("requests"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetAllPanAddElementRequests.GetAllPanAddElementRequestsRequests>? Requests = null,
    /// <value>The response's non-standard meta information.</value>
    [property:
        JsonPropertyName("meta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetAllPanAddElementRequests.GetAllPanAddElementRequestsMeta? Meta = null
)
{
    public record GetAllPanAddElementRequestsRequests(
        /// <value>The request's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Id = null,
        /// <value>The date and time at which the request was created.</value>
        [property:
            JsonPropertyName("createdAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? CreatedAt = null,
        /// <value>The ID of the user who created the request.</value>
        [property:
            JsonPropertyName("createdBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? CreatedBy = null,
        /// <value>The user's optional message included in the request.</value>
        [property:
            JsonPropertyName("message"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Message = null,
        /// <value>The request's status.</value>
        [property:
            JsonPropertyName("status"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetAllPanAddElementRequestsRequests.RequestsStatus? Status = null,
        /// <value>Information about the requested element.</value>
        [property:
            JsonPropertyName("element"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetAllPanAddElementRequestsRequests.RequestsElement? Element = null,
        /// <value>Information about the response to the request. This object only returns when the network manager denied a request with a message.</value>
        [property:
            JsonPropertyName("response"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetAllPanAddElementRequestsRequests.RequestsResponse? Response_ = null
    )
    {
        /// <summary>The request's status.</summary>
        public record RequestsStatus : ValueEnum<string>
        {
            internal RequestsStatus(string value)
                : base(value) { }

            public RequestsStatus()
                : base("pending") { }

            public static RequestsStatus Pending = new("pending");
            public static RequestsStatus Denied = new("denied");
        }

        /// <summary>Information about the requested element.</summary>
        public record RequestsElement(
            /// <value>The element's ID.</value>
            [property:
                JsonPropertyName("id"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Id = null,
            /// <value>The element type.</value>
            [property:
                JsonPropertyName("type"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                RequestsElement.ElementType1? Type_ = null,
            /// <value>The element's name.</value>
            [property:
                JsonPropertyName("name"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Name = null,
            /// <value>If applicable, the element's short summary.</value>
            [property: JsonPropertyName("summary")]
                string? Summary = null
        )
        {
            /// <summary>The element type.</summary>
            public record ElementType1 : ValueEnum<string>
            {
                internal ElementType1(string value)
                    : base(value) { }

                public ElementType1()
                    : base("api") { }

                public static ElementType1 Api = new("api");
                public static ElementType1 Workspace = new("workspace");
                public static ElementType1 Collection = new("collection");
            }
        }

        /// <summary>Information about the response to the request. This object only returns when the network manager denied a request with a message.</summary>
        public record RequestsResponse(
            /// <value>The date and time at which the network manager denied the request.</value>
            [property:
                JsonPropertyName("createdAt"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? CreatedAt = null,
            /// <value>The network manager's user ID.</value>
            [property:
                JsonPropertyName("createdBy"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                long? CreatedBy = null,
            /// <value>The network manager's request response message.</value>
            [property:
                JsonPropertyName("message"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? Message = null
        );
    }

    /// <summary>The response's non-standard meta information.</summary>
    public record GetAllPanAddElementRequestsMeta(
        /// <value>The maximum number of items returned.</value>
        [property:
            JsonPropertyName("limit"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Limit = null,
        /// <value>The zero-based offset of the first item returned.</value>
        [property:
            JsonPropertyName("offset"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Offset = null,
        /// <value>The total count of items found.</value>
        [property:
            JsonPropertyName("totalCount"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? TotalCount = null
    );
}
