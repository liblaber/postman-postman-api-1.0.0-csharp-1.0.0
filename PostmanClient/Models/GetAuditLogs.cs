// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record GetAuditLogs(
    [property:
        JsonPropertyName("trails"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetAuditLogs.Trails>? Trails_ = null
)
{
    public record Trails(
        /// <value>The audit event's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? Id = null,
        /// <value>The IP address of the user that performed the action.</value>
        [property:
            JsonPropertyName("ip"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Ip = null,
        /// <value>The user agent information.</value>
        [property:
            JsonPropertyName("userAgent"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? UserAgent = null,
        /// <value>The action performed by the user.</value>
        [property:
            JsonPropertyName("action"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Action = null,
        /// <value>The date and time at which the event occurred.</value>
        [property:
            JsonPropertyName("timestamp"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Timestamp = null,
        /// <value>The audit event's description.</value>
        [property:
            JsonPropertyName("message"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Message = null,
        [property:
            JsonPropertyName("data"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Trails.TrailsData? Data = null
    )
    {
        public record TrailsData(
            /// <value>Information about the user who preformed the audit event.</value>
            [property:
                JsonPropertyName("actor"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                TrailsData.Actor? Actor_ = null,
            /// <value>Information about the user.</value>
            [property:
                JsonPropertyName("user"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                TrailsData.DataUser? User = null,
            /// <value>The user's team information.</value>
            [property:
                JsonPropertyName("team"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                TrailsData.DataTeam? Team = null,
            /// <value>Additional information about the performed action.</value>
            [property:
                JsonPropertyName("variables"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                object? Variables = null
        )
        {
            /// <summary>Information about the user who preformed the audit event.</summary>
            public record Actor(
                /// <value>The user's name.</value>
                [property:
                    JsonPropertyName("name"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Name = null,
                /// <value>The user's username.</value>
                [property:
                    JsonPropertyName("username"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Username = null,
                /// <value>The user's email address.</value>
                [property:
                    JsonPropertyName("email"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Email = null,
                [property:
                    JsonPropertyName("id"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    double? Id = null,
                /// <value>If true, the user is active. If false, the user is deactivated.</value>
                [property:
                    JsonPropertyName("active"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    bool? Active = null
            );

            /// <summary>Information about the user.</summary>
            public record DataUser(
                /// <value>The user's name.</value>
                [property:
                    JsonPropertyName("name"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Name = null,
                /// <value>The user's username.</value>
                [property:
                    JsonPropertyName("username"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Username = null,
                /// <value>The user's email address.</value>
                [property:
                    JsonPropertyName("email"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Email = null,
                /// <value>The user's ID.</value>
                [property:
                    JsonPropertyName("id"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    double? Id = null
            );

            /// <summary>The user's team information.</summary>
            public record DataTeam(
                /// <value>The team's name.</value>
                [property:
                    JsonPropertyName("name"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    string? Name = null,
                /// <value>The team's ID.</value>
                [property:
                    JsonPropertyName("id"),
                    JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
                ]
                    double? Id = null
            );
        }
    }
}
