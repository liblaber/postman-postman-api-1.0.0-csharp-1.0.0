// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record GetScimUserResourceOkResponse(
    /// <value>The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).</value>
    [property:
        JsonPropertyName("schemas"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<string>? Schemas = null,
    /// <value>The team member's SCIM ID.</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>The team member's SCIM username.</value>
    [property:
        JsonPropertyName("userName"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? UserName = null,
    /// <value>Information about the Postman team member.</value>
    [property:
        JsonPropertyName("name"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetScimUserResourceOkResponse.ScimUserResourceName2? Name = null,
    /// <value>The team member's external ID.</value>
    [property:
        JsonPropertyName("externalId"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? ExternalId = null,
    /// <value>If true, the team member is active.</value>
    [property:
        JsonPropertyName("active"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        bool? Active = null,
    /// <value>The response's non-standard meta information.</value>
    [property:
        JsonPropertyName("meta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetScimUserResourceOkResponse.ScimUserResourceMeta2? Meta = null
)
{
    /// <summary>Information about the Postman team member.</summary>
    public record ScimUserResourceName2(
        /// <value>The team member's first name.</value>
        [property:
            JsonPropertyName("givenName"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? GivenName = null,
        /// <value>The team member's last name.</value>
        [property:
            JsonPropertyName("familyName"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? FamilyName = null
    );

    /// <summary>The response's non-standard meta information.</summary>
    public record ScimUserResourceMeta2(
        /// <value>The resource type.</value>
        [property:
            JsonPropertyName("resourceType"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? ResourceType = null,
        /// <value>The date and time at which the team member was created.</value>
        [property:
            JsonPropertyName("created"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Created = null,
        /// <value>The date and time at which the team member was last modified.</value>
        [property:
            JsonPropertyName("lastModified"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? LastModified = null
    );
}
