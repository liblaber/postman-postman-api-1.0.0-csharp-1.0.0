// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record PullRequestGet(
    /// <value>The date and time at which the pull request was created.</value>
    [property:
        JsonPropertyName("createdAt"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? CreatedAt = null,
    /// <value>The date and time at which the pull request was updated.</value>
    [property:
        JsonPropertyName("updatedAt"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? UpdatedAt = null,
    /// <value>The pull request's ID.</value>
    [property: JsonPropertyName("id"), JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        string? Id = null,
    /// <value>The pull request's title.</value>
    [property:
        JsonPropertyName("title"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Title = null,
    /// <value>The pull request's description.</value>
    [property:
        JsonPropertyName("description"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Description = null,
    /// <value>The ID of the user who created the pull request.</value>
    [property:
        JsonPropertyName("createdBy"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? CreatedBy = null,
    /// <value>The ID of the user who last updated the pull request.</value>
    [property:
        JsonPropertyName("updatedBy"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? UpdatedBy = null,
    /// <value>If the pull request is a `decline` status, an optoinal comment about why the pull request was declined.</value>
    [property:
        JsonPropertyName("comment"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Comment = null,
    /// <value>The type of element the pull request was forked from.</value>
    [property:
        JsonPropertyName("fortkType"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? FortkType = null,
    /// <value>Information about the pull request's source (parent) element.</value>
    [property:
        JsonPropertyName("source"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        PullRequestGet.Source? Source_ = null,
    /// <value>Information about the pull request destination element.</value>
    [property:
        JsonPropertyName("destination"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        PullRequestGet.Destination? Destination_ = null,
    /// <value>
    /// The pull request's current review status:
    /// - `open` — The pull request is still open.
    /// - `approved` — The pull request was approved by its reviewers.
    /// - `declined` — The pull request was not approved by its reviewers.
    /// </value>
    [property:
        JsonPropertyName("status"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? Status = null,
    /// <value>Information about the current progress of the pull request's merge.</value>
    [property:
        JsonPropertyName("merge"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        PullRequestGet.Merge? Merge_ = null,
    /// <value>Information about the reviewers assigned to the pull request.</value>
    [property:
        JsonPropertyName("reviewers"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<PullRequestGet.Reviewers>? Reviewers_ = null
)
{
    /// <summary>Information about the pull request's source (parent) element.</summary>
    public record Source(
        /// <value>The pull request's source ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The source element's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>The name of the fork created from the source element.</value>
        [property:
            JsonPropertyName("forkName"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? ForkName = null,
        /// <value>If true, whether the element is present and not deleted.</value>
        [property:
            JsonPropertyName("exists"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Exists = null
    );

    /// <summary>Information about the pull request destination element.</summary>
    public record Destination(
        /// <value>The destination element's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The destination element's name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>If true, whether the element is present and not deleted.</value>
        [property:
            JsonPropertyName("exists"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Exists = null
    );

    /// <summary>Information about the current progress of the pull request's merge.</summary>
    public record Merge(
        /// <value>
        /// The pull request's current merge status:
        /// - `inactive` — There is no merge in progress.
        /// - `inprogress` — The pull request is currently merging.
        /// - `failed` — The pull request's merge failed.
        /// </value>
        [property:
            JsonPropertyName("status"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            Merge.MergeStatus? Status = null
    )
    {
        /// <summary>
        /// The pull request's current merge status:
        /// - `inactive` — There is no merge in progress.
        /// - `inprogress` — The pull request is currently merging.
        /// - `failed` — The pull request's merge failed.
        /// </summary>
        public record MergeStatus : ValueEnum<string>
        {
            internal MergeStatus(string value)
                : base(value) { }

            public MergeStatus()
                : base("inactive") { }

            public static MergeStatus Inactive = new("inactive");
            public static MergeStatus Inprogress = new("inprogress");
            public static MergeStatus Failed = new("failed");
        }
    }

    public record Reviewers(
        /// <value>The reviewer's user ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>
        /// The reviewer's review status response. One of:
        /// - `approved`
        /// - `declined`
        /// </value>
        [property:
            JsonPropertyName("status"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Status = null
    );
}
