// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

public record DeleteCollectionFolder(
    /// <value>The folder's information.</value>
    [property:
        JsonPropertyName("data"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        DeleteCollectionFolder.DeleteCollectionFolderData? Data = null,
    /// <value>A Postman-specific response that contains information about the internal performed operation.</value>
    [property:
        JsonPropertyName("meta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        object? Meta = null,
    /// <value>The folder's ID.</value>
    [property:
        JsonPropertyName("model_id"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? ModelId = null,
    /// <value>An internal revision ID. Its value increments each time the resource changes. You can use this ID to track whether there were changes since the last time you fetched the resource.</value>
    [property:
        JsonPropertyName("revision"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        double? Revision = null
)
{
    /// <summary>The folder's information.</summary>
    public record DeleteCollectionFolderData(
        /// <value>The folder's ID.</value>
        [property:
            JsonPropertyName("id"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Id = null,
        /// <value>The user ID of the folder's owner.</value>
        [property:
            JsonPropertyName("owner"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Owner = null
    );
}
