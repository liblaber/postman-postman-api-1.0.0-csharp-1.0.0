// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;

namespace PostmanClient.Models;

/// <summary>Information about Postman's SCIM API configurations and supported operations.</summary>
public record GetScimServiceProviderConfig(
    /// <value>The [SCIM schema URI](https://www.iana.org/assignments/scim/scim.xhtml).</value>
    [property:
        JsonPropertyName("schemas"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<string>? Schemas = null,
    /// <value>A link to the URI's documentation.</value>
    [property:
        JsonPropertyName("documentationUri"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        string? DocumentationUri = null,
    /// <value>Information about patch configuration.</value>
    [property:
        JsonPropertyName("patch"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetScimServiceProviderConfig.Patch? Patch_ = null,
    /// <value>Information about bulk configuration.</value>
    [property:
        JsonPropertyName("bulk"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetScimServiceProviderConfig.Bulk? Bulk_ = null,
    /// <value>Information about the filter configuration.</value>
    [property:
        JsonPropertyName("filter"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetScimServiceProviderConfig.Filter? Filter_ = null,
    /// <value>Information about the change password configuration.</value>
    [property:
        JsonPropertyName("changePassword"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetScimServiceProviderConfig.ChangePassword? ChangePassword_ = null,
    /// <value>Information about the sort configuration.</value>
    [property:
        JsonPropertyName("sort"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetScimServiceProviderConfig.GetScimServiceProviderConfigSort? Sort = null,
    /// <value>A list of authentication schemes.</value>
    [property:
        JsonPropertyName("authenticationSchemes"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetScimServiceProviderConfig.AuthenticationSchemes>? AuthenticationSchemes_ = null,
    /// <value>Information about the [entity tag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) (Etag) HTTP response header configuration.</value>
    [property:
        JsonPropertyName("etag"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetScimServiceProviderConfig.Etag? Etag_ = null,
    /// <value>The response's non-standard meta information.</value>
    [property:
        JsonPropertyName("meta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetScimServiceProviderConfig.GetScimServiceProviderConfigMeta? Meta = null
)
{
    /// <summary>Information about patch configuration.</summary>
    public record Patch(
        /// <value>If true, the feature is supported.</value>
        [property:
            JsonPropertyName("supported"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Supported = null
    );

    /// <summary>Information about bulk configuration.</summary>
    public record Bulk(
        /// <value>The total number of maximum operations allowed for bulk operations.</value>
        [property:
            JsonPropertyName("maxOperations"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? MaxOperations = null,
        /// <value>The maximum payload allowed for bulk operations.</value>
        [property:
            JsonPropertyName("maxPayloadSize"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? MaxPayloadSize = null,
        /// <value>If true, the feature is supported.</value>
        [property:
            JsonPropertyName("supported"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Supported = null
    );

    /// <summary>Information about the filter configuration.</summary>
    public record Filter(
        /// <value>The total number of maximum results allowed for filter operations.</value>
        [property:
            JsonPropertyName("maxResults"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            double? MaxResults = null,
        /// <value>If true, the feature is supported.</value>
        [property:
            JsonPropertyName("supported"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Supported = null
    );

    /// <summary>Information about the change password configuration.</summary>
    public record ChangePassword(
        /// <value>If true, the feature is supported.</value>
        [property:
            JsonPropertyName("supported"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Supported = null
    );

    /// <summary>Information about the sort configuration.</summary>
    public record GetScimServiceProviderConfigSort(
        /// <value>If true, the feature is supported.</value>
        [property:
            JsonPropertyName("supported"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Supported = null
    );

    /// <summary>Information about the scheme.</summary>
    public record AuthenticationSchemes(
        /// <value>The scheme's description.</value>
        [property:
            JsonPropertyName("description"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Description = null,
        /// <value>The scheme's friendly name.</value>
        [property:
            JsonPropertyName("name"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Name = null,
        /// <value>A link to the scheme's specification documentation.</value>
        [property:
            JsonPropertyName("specUri"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? SpecUri = null,
        /// <value>The scheme's type.</value>
        [property:
            JsonPropertyName("type"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Type_ = null
    );

    /// <summary>Information about the [entity tag](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/ETag) (Etag) HTTP response header configuration.</summary>
    public record Etag(
        /// <value>If true, the feature is supported.</value>
        [property:
            JsonPropertyName("supported"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? Supported = null
    );

    /// <summary>The response's non-standard meta information.</summary>
    public record GetScimServiceProviderConfigMeta(
        [property:
            JsonPropertyName("resourceType"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? ResourceType = null,
        [property:
            JsonPropertyName("location"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Location = null
    );
}
