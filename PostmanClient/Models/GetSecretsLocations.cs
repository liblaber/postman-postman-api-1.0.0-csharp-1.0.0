// This file was generated by liblab | https://liblab.com/

using System.Text.Json.Serialization;
using PostmanClient.Json;

namespace PostmanClient.Models;

public record GetSecretsLocations(
    [property:
        JsonPropertyName("data"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        List<GetSecretsLocations.GetSecretsLocationsData>? Data = null,
    [property:
        JsonPropertyName("meta"),
        JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
    ]
        GetSecretsLocations.GetSecretsLocationsMeta? Meta = null
)
{
    /// <summary>Information about the secret finding locations.</summary>
    public record GetSecretsLocationsData(
        /// <value>If true, the resource in which the secret was found was deleted.</value>
        [property:
            JsonPropertyName("isResourceDeleted"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            bool? IsResourceDeleted = null,
        /// <value>The ID of the user who exposed the secret.</value>
        [property:
            JsonPropertyName("leakedBy"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? LeakedBy = null,
        /// <value>The location where the secret was found.</value>
        [property:
            JsonPropertyName("location"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Location = null,
        /// <value>The number of times the secret occurs in the location.</value>
        [property:
            JsonPropertyName("occurrences"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Occurrences = null,
        /// <value>The parent resource's unique ID. If the resource is a request, folder, or example, this value is a collection ID. If the resource is a collection, globals, or environment, this is the resource's ID.</value>
        [property:
            JsonPropertyName("parentResourceId"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? ParentResourceId = null,
        /// <value>The unique ID of the resource where the secret was detected.</value>
        [property:
            JsonPropertyName("resourceId"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? ResourceId = null,
        /// <value>The type of resource in which the secret was detected.</value>
        [property:
            JsonPropertyName("resourceType"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            GetSecretsLocationsData.DataResourceType? ResourceType = null,
        /// <value>The date and time at which the secret was detected.</value>
        [property:
            JsonPropertyName("detectedAt"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? DetectedAt = null,
        /// <value>The URL to the resource that contains the secret.</value>
        [property:
            JsonPropertyName("url"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Url = null
    )
    {
        /// <summary>The type of resource in which the secret was detected.</summary>
        public record DataResourceType : ValueEnum<string>
        {
            internal DataResourceType(string value)
                : base(value) { }

            public DataResourceType()
                : base("collection") { }

            public static DataResourceType Collection = new("collection");
            public static DataResourceType Folder = new("folder");
            public static DataResourceType Request_ = new("request");
            public static DataResourceType Example = new("example");
            public static DataResourceType Environment_ = new("environment");
            public static DataResourceType Globals = new("globals");
            public static DataResourceType Api = new("api");
        }
    }

    public record GetSecretsLocationsMeta(
        /// <value>The history of the secret's resolution status changes.</value>
        [property:
            JsonPropertyName("activityFeed"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            List<GetSecretsLocationsMeta.ActivityFeed>? ActivityFeed_ = null,
        /// <value>The pointer to the first record of the set of paginated results.</value>
        [property:
            JsonPropertyName("cursor"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? Cursor = null,
        /// <value>The maximum number of rows to return in the response.</value>
        [property:
            JsonPropertyName("limit"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Limit = null,
        /// <value>The Base64-encoded value that points to the next record in the results set.</value>
        [property: JsonPropertyName("nextCursor")]
            string? NextCursor = null,
        /// <value>The secret's obfuscated value.</value>
        [property:
            JsonPropertyName("obfuscatedSecret"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? ObfuscatedSecret = null,
        /// <value>The secret's SHA-256 hash.</value>
        [property:
            JsonPropertyName("secretHash"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? SecretHash = null,
        /// <value>The type of thesecret.</value>
        [property:
            JsonPropertyName("secretType"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            string? SecretType = null,
        /// <value>The total number of discovered secret locations.</value>
        [property:
            JsonPropertyName("total"),
            JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
        ]
            long? Total = null
    )
    {
        public record ActivityFeed(
            /// <value>The date and time at which the resolution status was last updated.</value>
            [property:
                JsonPropertyName("resolvedAt"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                string? ResolvedAt = null,
            /// <value>The ID of the user that updated the secret's resolution status.</value>
            [property:
                JsonPropertyName("resolvedBy"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                long? ResolvedBy = null,
            /// <value>
            /// The secret's current resolution status:
            /// - `ACTIVE` — The secret is active.
            /// - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
            /// - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
            /// - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
            /// </value>
            [property:
                JsonPropertyName("status"),
                JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)
            ]
                ActivityFeed.ActivityFeedStatus? Status = null
        )
        {
            /// <summary>
            /// The secret's current resolution status:
            /// - `ACTIVE` — The secret is active.
            /// - `FALSE_POSITIVE` — The discovered secret is not an actual secret.
            /// - `REVOKED` — The secret is valid, but the user rotated their key to resolve the issue.
            /// - `ACCEPTED_RISK` — The Secret Scanner found the secret, but user accepts the risk of publishing it.
            /// </summary>
            public record ActivityFeedStatus : ValueEnum<string>
            {
                internal ActivityFeedStatus(string value)
                    : base(value) { }

                public ActivityFeedStatus()
                    : base("FALSE_POSITIVE") { }

                public static ActivityFeedStatus FalsePositive = new("FALSE_POSITIVE");
                public static ActivityFeedStatus AcceptedRisk = new("ACCEPTED_RISK");
                public static ActivityFeedStatus Revoked = new("REVOKED");
                public static ActivityFeedStatus Active = new("ACTIVE");
            }
        }
    }
}
